<?xml version="1.0"?>
<doc>
  <assembly>
    <name>ModelEditControl</name>
  </assembly>
  <members>
    <member name="T:ModelText.ModelEditControl.XmlHeaderType">
      <summary>
            Defines what type of header should be inserted at the top,
            when you invoke the <see cref="M:ModelText.ModelEditControl.IModelEdit.save(System.IO.TextWriter,ModelText.ModelEditControl.XmlHeaderType)" /> method of the 
            <see cref="T:ModelText.ModelEditControl.IModelEdit" /> interface.
            </summary>
    </member>
    <member name="F:ModelText.ModelEditControl.XmlHeaderType.Xml">
      <summary>
            Specifies that there should be an XML header (but not an XHTML header), which looks like this:
            <code lang="xml">
            &lt;?xml version="1.0" encoding="UTF-8"?&gt;
            </code></summary>
    </member>
    <member name="F:ModelText.ModelEditControl.XmlHeaderType.Xhtml">
      <summary>
            Specifies that there should be a full XHTML header, which looks like this:
            <code lang="xml">
            &lt;?xml version="1.0" encoding="UTF-8"?&gt;
            &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;
            </code></summary>
    </member>
    <member name="F:ModelText.ModelEditControl.XmlHeaderType.None">
      <summary>
            Specifies that there should be no header at all.
            </summary>
    </member>
    <member name="T:ModelText.ModelEditControl.NamespaceDoc">
      <summary>
            This namespace includes the classes which implement the HTML control,
            and the interfaces which are implemented by those classes.
            <para>
            See
            <a href="1fb0ecf2-fb15-49e3-ba0f-2a32553c581b.htm">Instantiating a Control</a>
            and
            <a href="88f1546f-de4f-4311-b609-71cd7e2a09c4.htm">Using a Control</a>
            for an introduction to these topics.
            </para></summary>
    </member>
    <member name="T:ModelText.ModelEditControl.IModelEdit">
      <summary>
            This interface contains methods which let you access the content of the control.
            <para>The <see cref="P:ModelText.ModelEditControl.IModelEditControl.modelEdit" /> property returns an instance of this interface.</para></summary>
    </member>
    <member name="M:ModelText.ModelEditControl.IModelEdit.newDocument">
      <summary>
            Initializes the contents of the control, using a new empty XHTML document.
            </summary>
    </member>
    <member name="M:ModelText.ModelEditControl.IModelEdit.openDocument(System.IO.TextReader)">
      <summary>
            Initializes the contents of the control, using an entire XHTML document.
            </summary>
      <param name="textReader">A <see cref="T:System.IO.TextReader" /> instance from which the control can read an XHTML document.
            <c>TextReader</c> is an abstract class, so this parameter will actually be a subclass of <c>TextReader</c>:
            for example it may be a
            <see cref="T:System.IO.StreamReader" />
            in order to read the document from a file on disk; or, it may be a
            <see cref="T:System.IO.StringReader" />
            if the document is stored in a string.
            </param>
      <example>
        <code source="..\..\FormControls\FileModelEdit\Form1.cs" region="published help using openDocument" lang="cs" />
      </example>
    </member>
    <member name="M:ModelText.ModelEditControl.IModelEdit.openDocumentFragment(System.String,System.IO.TextReader)">
      <summary>
            Initializes the contents of the control, using a partial fragment (a subtree) of an XHTML document.
            </summary>
      <param name="rootElement">
            A string which identifies the root element of the specified document fragment.
            For example, if the document fragment is
            <c>"&lt;body&gt;&lt;h1&gt;Hello&lt;/h1&gt;&lt;/body&gt;"</c>
            then the value of this parameter should be <c>"body"</c>.
            This root element must also be a block element like <c>"div"</c> or <c>"body"</c>,
            and not just an inline element like <c>"span"</c> or <c>"strong"</c>.
            </param>
      <param name="textReader">A <see cref="T:System.IO.TextReader" /> instance from which the control can read the document fragment.
            <c>TextReader</c> is an abstract class, so this parameter will actually be a subclass of <c>TextReader</c>:
            for example it may be a
            <see cref="T:System.IO.StreamReader" />
            in order to read the document from a file on disk; or, it may be a
            <see cref="T:System.IO.StringReader" />
            if the document is stored in a string.
            </param>
      <example>
        <code source="..\..\FormControls\FileModelEdit\Form1.cs" region="published help using openDocumentFragment" lang="cs" />
      </example>
    </member>
    <member name="M:ModelText.ModelEditControl.IModelEdit.openDefaultTestDocument(System.Boolean)">
      <summary>
            Initializes the contents of the control, using a built-in default document which is used for testing.
            </summary>
      <remarks>
            The content of the built-in default document may vary from one version to another of the HTML control.
            </remarks>
      <param name="bForm">This boolean parameter specifies whether or not the test document should be a form
            (i.e. should contain an HTML form element and form controls).</param>
    </member>
    <member name="M:ModelText.ModelEditControl.IModelEdit.save(System.IO.TextWriter,ModelText.ModelEditControl.XmlHeaderType)">
      <summary>
            Gets a string whose value is the serialized HTML contents of the document (or document fragment) in the control.
            </summary>
      <param name="textWriter">A <see cref="T:System.IO.TextWriter" /> instance into which the control can write the document (or document fragment).
            <c>TextWriter</c> is an abstract class, so this parameter will actually be a subclass of <c>TextWriter</c>:
            for example it may be a
            <see cref="T:System.IO.StreamWriter" />
            in order to write the document from a file on disk; or, it may be a
            <see cref="T:System.IO.StringWriter" />
            if the document should be serialized to a string.</param>
      <param name="xmlHeaderType">A <see cref="T:ModelText.ModelEditControl.XmlHeaderType" /> instance,
            which specifies what type of header should be written:
            <list type="bullet"><item><description>
            You should probably specify <c>XmlHeaderType.Xhtml</c> if you're writing a whole document,
            especially if you're writing it to a disk file.
            </description></item><item><description>
            Alternatively, if the control contains a document fragment instead of a whole document
            (because you initialized it using the <see cref="M:ModelText.ModelEditControl.IModelEdit.openDocumentFragment(System.String,System.IO.TextReader)" /> method instead of the
            <see cref="M:ModelText.ModelEditControl.IModelEdit.openDocument(System.IO.TextReader)" /> method, then you should probably specify
            <c>XmlHeaderType.Xml</c> if you're writing the document fragment to disk.
            </description></item><item><description>
            Otherwise, you may prefer to specify <c>XmlHeaderType.None</c> if you're writing the document fragment to a string,
            especially if you're intending to concatenate it with other documents fragments
            (you wouldn't want headers embedded between concatenated fragments).
            </description></item></list></param>
      <example>
        <code source="..\..\FormControls\FileModelEdit\Form1.cs" region="published help using save" lang="cs" />
      </example>
    </member>
    <member name="M:ModelText.ModelEditControl.IModelEdit.createEditorTransaction">
      <summary>
            Gets a <see cref="T:ModelText.ModelDom.Nodes.IEditorTransaction" /> instance, which helps
            to combine several DOM edits into a single transaction, which
            can be undone and redone as if they were a single, atomic operation.
            </summary>
      <returns>A <see cref="T:ModelText.ModelDom.Nodes.IEditorTransaction" /> instance.</returns>
    </member>
    <member name="M:ModelText.ModelEditControl.IModelEdit.parseSubroutines(ModelText.ModelXml.ModelXmlTag)">
      <exclude />
    </member>
    <member name="M:ModelText.ModelEditControl.IModelEdit.save2(ModelText.ModelXml.ModelXmlWriter)">
      <exclude />
    </member>
    <member name="M:ModelText.ModelEditControl.IModelEdit.debugDumpBlocks(System.IO.TextWriter)">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditControl.IModelEdit.formDataset">
      <summary>
            Gets a string which contains the values of all the successful controls within an HTML form.
            </summary>
      <remarks>
            Only the contents of "successful" controls are returned, as defined in the
            <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2" target="_blank">W3C specification</a>.
            <para>
            The contents of successful controls are concatenated and returned as a single string.
            The format of the string matches the
            <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1" target="_blank">application/x-www-form-urlencoded</a>
            content type.
            </para><para>You will want to call this property from the method in your application
            which is invoked when the user presses the form's Submit button
            (see <see cref="M:ModelText.ModelDom.Events.DomEventListeners.onFormSubmitted(ModelText.ModelDom.Nodes.IDomDocument,System.Action{System.String})" /> for further details).</para></remarks>
      <example>
        <code source="..\..\Application\ModelTextApplication\AppControl.cs" region="published help using formDataset" lang="cs" />
      </example>
    </member>
    <member name="P:ModelText.ModelEditControl.IModelEdit.toolContainer">
      <summary>
            Gets the instance of the <see cref="T:ModelText.ModelEditToolCommands.IToolContainer" /> interface,
            which lets you interact with the buttons on the toolbar.
            </summary>
    </member>
    <member name="P:ModelText.ModelEditControl.IModelEdit.domDocument">
      <summary>
            Gets the instance of the <see cref="T:ModelText.ModelDom.Nodes.IDomDocument" /> interface,
            which is implemented by the document object that is the root node of the DOM,
            via which you can subsequently access all the other nodes in the DOM.
            </summary>
    </member>
    <member name="P:ModelText.ModelEditControl.IModelEdit.windowSelection">
      <summary>
            Gets the instance of the <see cref="T:ModelText.ModelDom.Range.IWindowSelection" /> interface,
            via which you can read and write the
            <see cref="T:ModelText.ModelDom.Range.IDomRange" /> instances which represent the user's selections
            (for example, the location of the insertion caret within the DOM).
            </summary>
    </member>
    <member name="P:ModelText.ModelEditControl.IModelEdit.css">
      <summary>
            Sets the CSS which should be used to render the document.
            </summary>
      <remarks>To be effective, this property must be set
            before the document is loaded and rendered, i.e. before
            you invoke the <see cref="M:ModelText.ModelEditControl.IModelEdit.newDocument" />, <see cref="M:ModelText.ModelEditControl.IModelEdit.openDocument(System.IO.TextReader)" />,
            or <see cref="M:ModelText.ModelEditControl.IModelEdit.openDocumentFragment(System.String,System.IO.TextReader)" /> methods.
            <para>
            If you set this property to <c>null</c>, then the control will use its own built-in style sheet.
            </para><para>
            If you set this property to an empty string, then the control will use no style sheet,
            in other words it will use a 'reset' style sheet which is based on
            <a href="http://www.w3.org/TR/CSS2/sample.html" target="_blank">Appendix D of the CSS specification</a>.
            </para><para>After you set this property, its value remains set for the lifetime of the control instance:
            the same CSS definition will be used for all the HTML that you load and reload into the control.</para><para>As well as or instead of using this property, you can also use:
            <list type="bullet"><item>
            The <c>style=</c> attribute on specific HTML tags (for example,
            <c>&lt;span style="display: inline-block"&gt;Foo Bar&lt;/span&gt;</c>).
            </item><item>
            The <c>&lt;style&lt;</c> elemement in the head of the document (for example,
            <c>&lt;style&gt;span {display: inline-block}&lt;/style&gt;</c>).
            </item></list></para></remarks>
    </member>
    <member name="P:ModelText.ModelEditControl.IModelEdit.modelEditSettings">
      <exclude />
    </member>
    <member name="T:ModelText.ModelEditControl.ScrollableControl">
      <summary>
            This class implements the HTML control.
            It has a scrollbar but does not display the toolbar.
            </summary>
      <remarks>
            See <a href="1fb0ecf2-fb15-49e3-ba0f-2a32553c581b.htm">Instantiating a Control</a>
            and <a href="88f1546f-de4f-4311-b609-71cd7e2a09c4.htm">Using a Control</a>
            for an introduction to the HTML control classes.
            </remarks>
    </member>
    <member name="T:ModelText.ModelEditControl.IModelEditControl">
      <summary>
            This interface is implemented by the
            <see cref="T:ModelText.ModelEditControl.TooledControl" />
            and
            <see cref="T:ModelText.ModelEditControl.ScrollableControl" />
            classes.
            <para>
            The static
            <see cref="T:ModelText.ModelEditControl.ModelEditFactory" />
            methods return an instance of this interface.
            </para></summary>
    </member>
    <member name="M:ModelText.ModelEditControl.IModelEditControl.emulateModalDialog(System.Windows.Forms.Control,System.Boolean,ModelText.ModelEditControl.OnEscape)">
      <summary>
            Use this method to emulate a modal dialog or popup window.
            </summary>
      <remarks>The control which you pass in as a parameter
            is displayed on top and in the middle of the edit control,
            and the edit control itself is greyed.
            This method is useful when the application is being run
            with limited UI permissions, such that popping a real
            dialog in a separate form would result in an
            ugly/annoying security message displayed to the end user.</remarks>
      <param name="dialog">
            The user control which implements functionality like a modal dialog.
            <para>
            When the dialog is dismissed, for example when the user presses the
            dialog's OK or Canel button, then call this method again
            but specify a <c>null</c> parameter.
            </para></param>
      <param name="canFocus">
            Whether the Control that's being passed in is able to accept the input
            (for keyboard input).
            If true then the input focus is moved to the new control.
            </param>
      <param name="onEscape">
            A delegate which is invoked when the user presses the Esc (Escape) key.
            The caller, which owns the Control dialog, can cancel the dialog
            (by invoking <c>emulateModalDialog</c> with a null parameter),
            and then dispose the control.
            </param>
    </member>
    <member name="M:ModelText.ModelEditControl.IModelEditControl.interceptKeyDown(System.Windows.Forms.KeyEventHandler)">
      <summary>
            This method lets you install a KeyEventHandler handler which intercepts KeyDown events.
            Your handler can set KeyEventArgs.SuppressKeyPress if it handles the event and wants
            to prevent the event's being propagated.
            An application which uses an IModelEdit instance should use this method instead of
            using, for example, the ToolStripMenuItem.ShortcutKeys property:
            because the IModelEdit instance is able to accept all keys
            including left and right arrow as input keys, therefore these keys are not
            reliably handled by the ToolStripMenuItem.ShortcutKeys property.
            </summary>
      <exclude />
      <param name="keyEventHandler">
      </param>
    </member>
    <member name="P:ModelText.ModelEditControl.IModelEditControl.modelEdit">
      <summary>
            This property returns an instance of the <see cref="T:ModelText.ModelEditControl.IModelEdit" /> interface.
            </summary>
    </member>
    <member name="P:ModelText.ModelEditControl.IModelEditControl.control">
      <summary>
            Gets the instance of the
            <see cref="T:System.Windows.Forms.Control" />
            (which is either a
            <see cref="T:ModelText.ModelEditControl.TooledControl" />
            or a
            <see cref="T:ModelText.ModelEditControl.ScrollableControl" /> instance)
            which is implementing this interface.
            </summary>
      <example>
            See <a href="88f1546f-de4f-4311-b609-71cd7e2a09c4.htm">Using a Control</a>
            for an example of how to use this property.
            </example>
    </member>
    <member name="P:ModelText.ModelEditControl.IModelEditControl.focus">
      <summary>
            Gets the instance of the
            <see cref="T:System.Windows.Forms.Control" />
            which needs to have the input focus in order for the HTML control to receive keystrokes.
            </summary>
      <example>
            See <a href="88f1546f-de4f-4311-b609-71cd7e2a09c4.htm">Using a Control</a>
            for an example of how to use this property.
            </example>
    </member>
    <member name="P:ModelText.ModelEditControl.IModelEditControl.editControl">
      <summary>
            Gets the instance of the
            <see cref="T:System.Windows.Forms.Control" />
            on which the HTML is rendered.
            This isn't the same as the control returned by the <see cref="P:ModelText.ModelEditControl.IModelEditControl.control" />
            property, which contains this control and also contains other controls
            such as the toolbar and the scrollbar.
            </summary>
    </member>
    <member name="M:ModelText.ModelEditControl.ScrollableControl.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:ModelText.ModelEditControl.ScrollableControl.#ctor">
      <summary>
            Initializes a new instance of the
            <see cref="T:ModelText.ModelEditControl.ScrollableControl" />
            class.
            </summary>
    </member>
    <member name="M:ModelText.ModelEditControl.ScrollableControl.interceptKeyDown(System.Windows.Forms.KeyEventHandler)">
      <exclude />
    </member>
    <member name="M:ModelText.ModelEditControl.ScrollableControl.emulateModalDialog(System.Windows.Forms.Control,System.Boolean,ModelText.ModelEditControl.OnEscape)">
      <inheritdoc />
    </member>
    <member name="M:ModelText.ModelEditControl.ScrollableControl.OnCreateControl">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditControl.ScrollableControl.modelEdit">
      <inheritdoc />
    </member>
    <member name="P:ModelText.ModelEditControl.ScrollableControl.control">
      <inheritdoc />
    </member>
    <member name="P:ModelText.ModelEditControl.ScrollableControl.focus">
      <inheritdoc />
    </member>
    <member name="P:ModelText.ModelEditControl.ScrollableControl.editControl">
      <inheritdoc />
    </member>
    <member name="T:ModelText.WebEditor">
      <summary>
            This class is a subclass of <see cref="T:ModelText.ModelEditControl.TooledControl" />.
            It provides a simplified API, which is easier to use when the control
            is being embedded in a web page.
            </summary>
    </member>
    <member name="M:ModelText.WebEditor.#ctor">
      <summary>
            Initializes a new instance of the
            <see cref="T:ModelText.WebEditor" />
            class.
            </summary>
      <remarks>
            The constructor automatically calls the <see cref="M:ModelText.ModelEditControl.TooledControl.addTools" /> method,
            and installs an event handler for the <see cref="P:ModelText.ModelEditToolCommands.IToolContainer.onToolCommand" /> event.
            </remarks>
    </member>
    <member name="M:ModelText.WebEditor.haveSaveRequest">
      <summary>
            Returns true, if the user has used the toolbar or a hotkey
            to request that the document be saved
            </summary>
      <remarks>
            This method can be polled, using JavaScript running on the web page.
            </remarks>
      <returns>True if the user has requested a save.</returns>
    </member>
    <member name="M:ModelText.WebEditor.setDocument(System.String)">
      <summary>
            Initializes the control, using a XHTML document.
            </summary>
      <param name="document">An XHTML document.</param>
    </member>
    <member name="M:ModelText.WebEditor.getDocument">
      <summary>
            Gets a copy of the edited document from the control.
            </summary>
      <remarks>
            Use this method if the control was initialized using the
            <see cref="M:ModelText.WebEditor.setDocument(System.String)" /> method.
            </remarks>
      <returns>The edited document.</returns>
    </member>
    <member name="M:ModelText.WebEditor.setDocumentFragment(System.String)">
      <summary>
            Initializes the control, using a XHTML document fragment.
            </summary>
      <remak>
            The root element of fragment should be <c>&lt;body&gt;</c>.
            </remak>
      <param name="documentFragment">An XHTML document fragment.</param>
    </member>
    <member name="M:ModelText.WebEditor.getDocumentFragment">
      <summary>
            Gets a copy of the edited document fragment from the control.
            </summary>
      <remarks>
            Use this method if the control was initialized using the
            <see cref="M:ModelText.WebEditor.setDocumentFragment(System.String)" /> method.
            </remarks>
      <returns>The edited document.</returns>
    </member>
    <member name="T:ModelText.ModelEditControl.ModelEditFactory">
      <summary>
            This methods of this static class
            instantiate and return a new instance of the
            <see cref="T:ModelText.ModelEditControl.TooledControl" />
            and/or
            <see cref="T:ModelText.ModelEditControl.ScrollableControl" />
            classes.
            </summary>
    </member>
    <member name="M:ModelText.ModelEditControl.ModelEditFactory.createTooledControl">
      <summary>
            Returns a newly-created instance of
            the <see cref="T:ModelText.ModelEditControl.TooledControl" /> type.
            This method also automatically invokes the
            <see cref="M:ModelText.ModelEditControl.TooledControl.addTools" /> method of the newly-created instance.
            </summary>
      <returns>
            The
            <see cref="T:ModelText.ModelEditControl.IModelEditControl" /> interface
            which is implemented by the newly-created
            the <see cref="T:ModelText.ModelEditControl.TooledControl" /> instance.
            </returns>
    </member>
    <member name="M:ModelText.ModelEditControl.ModelEditFactory.createScrollableControl">
      <summary>
            Returns a newly-created instance of
            the <see cref="T:ModelText.ModelEditControl.ScrollableControl" /> type.
            </summary>
      <returns>
            The
            <see cref="T:ModelText.ModelEditControl.IModelEditControl" /> interface
            which is implemented by the newly-created
            the <see cref="T:ModelText.ModelEditControl.ScrollableControl" /> instance.
            </returns>
    </member>
    <member name="T:ModelText.ModelEditControl.TooledControlUntrusted">
      <summary>
            This class has the same functionality as <see cref="T:ModelText.ModelEditControl.TooledControl" />
            but can also be used from code which has
            the <c>UIPermissionWindow.SafeTopLevelWindows</c> permission
            and doesn't have <c>UIPermissionWindow.AllWindows</c>.
            </summary>
    </member>
    <member name="M:ModelText.ModelEditControl.TooledControlUntrusted.#ctor">
      <summary>
            Initializes a new instance of the
            <see cref="T:ModelText.ModelEditControl.TooledControlUntrusted" />
            class.
            </summary>
    </member>
    <member name="M:ModelText.ModelEditControl.TooledControlUntrusted.OnCreateControl">
      <exclude />
    </member>
    <member name="M:ModelText.ModelEditControl.TooledControlUntrusted.emulateModalDialog(System.Windows.Forms.Control,System.Boolean,ModelText.ModelEditControl.OnEscape)">
      <inheritdoc />
    </member>
    <member name="M:ModelText.ModelEditControl.TooledControlUntrusted.interceptKeyDown(System.Windows.Forms.KeyEventHandler)">
      <inheritdoc />
    </member>
    <member name="P:ModelText.ModelEditControl.TooledControlUntrusted.modelEdit">
      <inheritdoc />
    </member>
    <member name="P:ModelText.ModelEditControl.TooledControlUntrusted.control">
      <inheritdoc />
    </member>
    <member name="P:ModelText.ModelEditControl.TooledControlUntrusted.focus">
      <inheritdoc />
    </member>
    <member name="P:ModelText.ModelEditControl.TooledControlUntrusted.editControl">
      <inheritdoc />
    </member>
    <member name="T:ModelText.ModelEditControl.TooledControl">
      <summary>
            This class implements the HTML control.
            It has a scrollbar, and can also display a toolbar.
            </summary>
      <remarks>
            See <a href="1fb0ecf2-fb15-49e3-ba0f-2a32553c581b.htm">Instantiating a Control</a>
            and <a href="88f1546f-de4f-4311-b609-71cd7e2a09c4.htm">Using a Control</a>
            for an introduction to the HTML control classes.
            </remarks>
    </member>
    <member name="M:ModelText.ModelEditControl.TooledControl.#ctor">
      <summary>
            Initializes a new instance of the
            <see cref="T:ModelText.ModelEditControl.TooledControl" />
            class.
            </summary>
    </member>
    <member name="M:ModelText.ModelEditControl.TooledControl.emulateModalDialog(System.Windows.Forms.Control,System.Boolean,ModelText.ModelEditControl.OnEscape)">
      <inheritdoc />
    </member>
    <member name="M:ModelText.ModelEditControl.TooledControl.interceptKeyDown(System.Windows.Forms.KeyEventHandler)">
      <inheritdoc />
    </member>
    <member name="M:ModelText.ModelEditControl.TooledControl.addTools">
      <summary>
            Initializes the toolbar which belongs to this control.
            If this method isn't called, then the toolbar is not displayed.
            This method is called automatically if you use the
            <see cref="M:ModelText.ModelEditControl.ModelEditFactory.createTooledControl" />
            method to instantiate this
            <see cref="T:ModelText.ModelEditControl.TooledControl" />
            instance.
            </summary>
    </member>
    <member name="M:ModelText.ModelEditControl.TooledControl.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:ModelText.ModelEditControl.TooledControl.modelEdit">
      <inheritdoc />
    </member>
    <member name="P:ModelText.ModelEditControl.TooledControl.control">
      <inheritdoc />
    </member>
    <member name="P:ModelText.ModelEditControl.TooledControl.focus">
      <inheritdoc />
    </member>
    <member name="P:ModelText.ModelEditControl.TooledControl.editControl">
      <inheritdoc />
    </member>
    <member name="T:ModelText.ModelEditControl.OnEscape">
      <summary>
            This is a delegate which is called when the user presses the Esc (Escape) key.
            </summary>
    </member>
    <member name="T:ModelText.ModelDom.Html.IHtmlInputElement">
      <summary>
            This interface represents an HTML <c>&lt;form&gt;</c> element.
            </summary>
      <remarks>For further details, see the W3C
            <a href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-6043025" target="_blank">HTMLInputElement</a>
            documentation.
            </remarks>
    </member>
    <member name="T:ModelText.ModelDom.Html.IHtmlElement">
      <summary>
            This interface represents an element node.
            </summary>
      <remarks>
            This interface subclasses <see cref="T:ModelText.ModelDom.Nodes.IDomElement" />, and all
            <see cref="T:ModelText.ModelDom.Nodes.IDomElement" /> instances are instances of this interface
            (some instances are also subclasses of this interface, for example
            <see cref="T:ModelText.ModelDom.Html.IHtmlInputElement" /> etc.).
            <para>
            For further details, see the W3C
            <a href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-58190037" target="_blank">HTMLElement</a>
            documentation.
            </para></remarks>
    </member>
    <member name="T:ModelText.ModelDom.Nodes.IDomElement">
      <summary>
            This interface represents an element node.
            </summary>
      <remarks>For further details, see the W3C
            <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-745549614" target="_blank">Element</a>
            documentation.
            </remarks>
    </member>
    <member name="T:ModelText.ModelDom.Nodes.IDomNode">
      <summary>
            This interface is the base type for all nodes in the tree.
            </summary>
      <remarks>For further details, see the W3C
            <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1950641247" target="_blank">Node</a> documentation.
            </remarks>
    </member>
    <member name="T:ModelText.ModelDom.Events.IDomEventTarget">
      <summary>
            This interface is implemented by all <see cref="T:ModelText.ModelDom.Nodes.IDomNode" /> instances,
            and lets the application install an event handler which will be invoked when various events happen to the node.
            </summary>
      <remarks>For further details, see the W3C
            <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget" target="_blank">EventTarget</a> documentation.
            </remarks>
    </member>
    <member name="M:ModelText.ModelDom.Events.IDomEventTarget.addEventListener(ModelText.ModelDom.Events.DomEventType,ModelText.ModelDom.Events.DomEventListener,System.Boolean)">
      <summary>
            This method allows the registration of event listeners on the event target. 
            </summary>
      <param name="domEventType">The event type for which the user is registering.</param>
      <param name="domEventListener">A delegate which represents the application-defined method
             to be called when the event occurs.</param>
      <param name="useCapture">If true, useCapture indicates that the user wishes to initiate capture.
            After initiating capture, all events of the specified type will be dispatched to the registered EventListener before being dispatched to any EventTargets beneath them in the tree. Events which are bubbling upward through the tree will not trigger an EventListener designated to use capture.</param>
      <remarks>
            If an EventListener is added to an EventTarget while it is processing an event, it will not be triggered by the current actions but may be triggered during a later stage of event flow, such as the bubbling phase.
            If multiple identical EventListeners are registered on the same EventTarget with the same parameters the duplicate instances are discarded. They do not cause the EventListener to be called twice and since they are discarded they do not need to be removed with the removeEventListener method. 
            </remarks>
    </member>
    <member name="M:ModelText.ModelDom.Events.IDomEventTarget.removeEventListener(ModelText.ModelDom.Events.DomEventType,ModelText.ModelDom.Events.DomEventListener,System.Boolean)">
      <summary>
            This method allows the removal of event listeners from the event target.
            </summary>
      <param name="domEventType">Specifies the event type of the EventListener being removed.</param>
      <param name="domEventListener">The EventListener parameter indicates the EventListener to be removed.</param>
      <param name="useCapture">Specifies whether the EventListener being removed was registered as a capturing listener or not. If a listener was registered twice, one with capture and one without, each must be removed separately. Removal of a capturing listener does not affect a non-capturing version of the same listener, and vice versa.</param>
      <remarks>
            If an EventListener is removed from an EventTarget while it is processing an event, it will not be triggered by the current actions. EventListeners can never be invoked after being removed.
            Calling removeEventListener with arguments which do not identify any currently registered EventListener on the EventTarget has no effect. 
            </remarks>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomNode.isSameNode(ModelText.ModelDom.Nodes.IDomNode)">
      <summary>
            Returns whether this node is the same node as the given one.
            </summary>
      <param name="other">The node to test against.</param>
      <returns>Returns true if the nodes are the same, false otherwise.</returns>
      <remarks>
            This method provides a way to determine whether two Node references returned by the implementation reference the same object. When two Node references are references to the same object, even if through a proxy, the references may be used completely interchangeably, such that all attributes have the same values and calling the same DOM method on either reference always has exactly the same effect.
            </remarks>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomNode.cloneNode(System.Boolean)">
      <summary>
            Returns a duplicate of this node, i.e., serves as a generic copy constructor for nodes.
            </summary>
      <param name="deep">If true, recursively clone the subtree under the specified node; if false, clone only the node itself (and its attributes, if it is a <see cref="T:ModelText.ModelDom.Nodes.IDomElement" />).</param>
      <returns>The duplicate node.</returns>
      <remarks>
            The duplicate node has no parent (parentNode is null) and no user data.
            <para>
            Cloning an Element copies all attributes and their values, but this method does not copy any children it contains unless it is a deep clone.
            This includes text contained in an the Element since the text is contained in a child Text node.
            Cloning any other type of node simply returns a copy of this node.
            </para></remarks>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomNode.insertBefore(ModelText.ModelDom.Nodes.IDomNode,ModelText.ModelDom.Nodes.IDomNode)">
      <summary>
            Inserts the node newChild before the existing child node refChild.
            </summary>
      <param name="newChild">The node to insert.</param>
      <param name="refChild">The reference node, i.e., the node before which the new node must be inserted.</param>
      <returns>The node being inserted.</returns>
      <remarks>
            If refChild is null, insert newChild at the end of the list of children.
            If newChild is a DocumentFragment object, all of its children are inserted, in the same order, before refChild.
            If the newChild is already in the tree, it is first removed.
            </remarks>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomNode.removeChild(ModelText.ModelDom.Nodes.IDomNode)">
      <summary>
            Removes the child node indicated by oldChild from the list of children, and returns it.
            </summary>
      <param name="oldChild">The node being removed.</param>
      <returns>The node removed.</returns>
    </member>
    <member name="P:ModelText.ModelDom.Nodes.IDomNode.parentNode">
      <summary>
            The parent of this node.
            </summary>
      <remarks>
            All nodes, except Document, DocumentFragment, and Attr may have a parent.
            However, if a node has just been created and not yet added to the tree, or if it has been removed from the tree, this is null.
            </remarks>
    </member>
    <member name="P:ModelText.ModelDom.Nodes.IDomNode.childNodes">
      <summary>
            Gets a <see cref="T:ModelText.ModelDom.Nodes.IDomListT`1" /> that contains all children of this node.
            </summary>
      <remarks>If there are no children, this is a <see cref="T:ModelText.ModelDom.Nodes.IDomListT`1" /> containing no nodes.</remarks>
    </member>
    <member name="P:ModelText.ModelDom.Nodes.IDomNode.nodeType">
      <summary>
            A <see cref="T:ModelText.ModelDom.Nodes.DomNodeType" /> which represents the type of the underlying object
            </summary>
    </member>
    <member name="P:ModelText.ModelDom.Nodes.IDomNode.attributes">
      <summary>
            A <see cref="T:ModelText.ModelDom.Nodes.IDomNamedNodeMap" /> containing the attributes of this node (if this node is a <see cref="T:ModelText.ModelDom.Nodes.IDomElement" />) or <c>null</c> otherwise.
            </summary>
    </member>
    <member name="P:ModelText.ModelDom.Nodes.IDomNode.nodeName">
      <summary>
            The name of this node, depending on its type.
            </summary>
      <remarks>
            See the table below the
            <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1841493061" target="_blank">NodeType description</a>
            for a description of how <c>nodeName</c> is initialized for different types of node.
            </remarks>
    </member>
    <member name="P:ModelText.ModelDom.Nodes.IDomNode.nodeValue">
      <summary>
            The value of this node, depending on its type.
            </summary>
      <remarks>
            See the table below the
            <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1841493061" target="_blank">NodeType description</a>
            for a description of how <c>nodeValue</c> is initialized for different types of node.
            </remarks>
    </member>
    <member name="P:ModelText.ModelDom.Nodes.IDomNode.ownerDocument">
      <summary>
            The <see cref="T:ModelText.ModelDom.Nodes.IDomDocument" /> object associated with this node.
            </summary>
      <remarks>
            This is also the <see cref="T:ModelText.ModelDom.Nodes.IDomDocument" /> object used to create new nodes.
            </remarks>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomElement.getAttribute(System.String)">
      <summary>
            Retrieves an attribute value by name
            </summary>
      <param name="name">The name of the attribute to retrieve.</param>
      <returns>The Attr value as a string.
            <note type="caution">The W3C documentation says that this method returns
            "the empty string if that attribute does not have a specified or default value".
            However, the current implementation of this method return <c>null</c>.
            In the future, the implementation may change to match the W3C's specification.
            If you want to test for a non-existent attribute value, you should therefore use
            the <see cref="M:System.String.IsNullOrEmpty(System.String)" /> method on the
            string value returned by this method.
            </note></returns>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomElement.setAttribute(System.String,System.String)">
      <summary>
            Adds a new attribute.
            </summary>
      <param name="name">The name of the attribute to create or alter.</param>
      <param name="value">Value to set in string form.</param>
      <remarks>
            If an attribute with that name is already present in the element, its value is changed to be that of the value parameter.
            This value is a simple string; it is not parsed as it is being set.
            <para>The following sentences from the W3C documentation are not true:</para><blockquote>
            "So any markup (such as syntax to be recognized as an entity reference) is treated as literal text, and needs to be appropriately escaped by the implementation when it is written out.
            In order to assign an attribute value that contains entity references, the user must create an Attr node plus any Text and EntityReference nodes, build the appropriate subtree, and use setAttributeNode to assign it as the value of an attribute."
            </blockquote><para>This sentence isn't true because this API doesn't support entity references,
            and also doesn't support attributes being accessed as a type of node.</para><blockquote>"To set an attribute with a qualified name and namespace URI, use the setAttributeNS method."</blockquote><para>This sentence isn't true because this API doesn't implement a setAttributeNS method,
            and doesn't support having attributes with a qualified name and namespace URI.</para></remarks>
    </member>
    <member name="P:ModelText.ModelDom.Nodes.IDomElement.tagName">
      <summary>
            The name of the element.
            Note that this is case-preserving in XML.
            </summary>
    </member>
    <member name="P:ModelText.ModelDom.Html.IHtmlElement.id">
      <summary>
            The element's identifier.
            </summary>
      <remarks>
            See the
            <a href="http://www.w3.org/TR/1999/REC-html401-19991224/struct/global.html#adef-id" target="_blank">id attribute definition</a>
            in HTML 4.01.
            </remarks>
    </member>
    <member name="P:ModelText.ModelDom.Html.IHtmlElement.className">
      <summary>
            The class attribute of the element.
            </summary>
      <remarks>
            This attribute has been renamed due to conflicts with the "class" keyword exposed by many languages.
            See the
            <a href="http://www.w3.org/TR/1999/REC-html401-19991224/struct/global.html#adef-class" target="_blank">class attribute definition</a>
            in HTML 4.01.
            </remarks>
    </member>
    <member name="P:ModelText.ModelDom.Html.IHtmlInputElement.type">
      <summary>
            The type of control created (all lower case).
            </summary>
      <remarks>
            See the
            <a href="http://www.w3.org/TR/1999/REC-html401-19991224/interact/forms.html#adef-type-INPUT" target="_blank">type attribute definition</a>
            in HTML 4.01.
            </remarks>
    </member>
    <member name="P:ModelText.ModelDom.Html.IHtmlInputElement.value">
      <summary>
            When the type attribute of the element has the value "text", "file" or "password",
            this represents the current contents of the corresponding form control, in an interactive user agent.
            Changing this attribute changes the contents of the form control, but does not change the value of the
            HTML value attribute of the element.
            <para>
            When the type attribute of the element has the value "button", "hidden", "submit", "reset", "image",
            "checkbox" or "radio", this represents the HTML value attribute of the element.
            </para></summary>
      <remarks>
            See the
            <a href="http://www.w3.org/TR/1999/REC-html401-19991224/interact/forms.html#adef-value-INPUT" target="_blank">value attribute definition</a>
            in HTML 4.01.
            </remarks>
    </member>
    <member name="P:ModelText.ModelDom.Html.IHtmlInputElement.isChecked">
      <summary>
            When the type attribute of the element has the value "radio" or "checkbox", this represents the current state of the form control, in an interactive user agent. Changes to this attribute change the state of the form control, but do not change the value of the HTML checked attribute of the INPUT element.
            </summary>
      <remarks>This property is named 'checked' in the W3C specification, however 'checked' is a C# keyword
            so the property is renamed here to 'isChecked'.
            </remarks>
    </member>
    <member name="P:ModelText.ModelDom.Html.IHtmlInputElement.name">
      <summary>
            Form control or object name when submitted with a form.
            </summary>
      <remarks>
            See the
            <a href="http://www.w3.org/TR/1999/REC-html401-19991224/interact/forms.html#adef-name-INPUT" target="_blank">name attribute definition</a>
            in HTML 4.01.
            </remarks>
    </member>
    <member name="T:ModelText.ModelDom.Nodes.NamespaceDoc">
      <summary>
            This namespace includes interfaces to read and write the DOM,
            after the DOM is loaded into the control.
            <para>Most of the interfaces in this namespace are based on a subset of the API
            defined in the W3C <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html" target="_blank">Document Object Model (DOM) Level 3 Core Specification</a>.
            </para><para>
            See
            <a href="d20323c8-e131-4ca0-8421-27e08442a5bc.htm#nodes">Nodes in the DOM</a>
            for an overview of the types in this namespace.
            </para></summary>
      <remarks>
        <para>
            Because this API is based on a subset of the W3C's API,
            this documentation is based on a subset of the W3C's documentation:
            </para>
        <list type="bullet">
          <item>
            <description>The description of each interface includes a <strong>hyperlink</strong>
            to the description of the corresponding interface in the W3C documentation.</description>
          </item>
          <item>
            <description>The description of each member of an interface is a <strong>copy and paste</strong>
            of the W3C documentation for the corresponding member of the W3C's interface.</description>
          </item>
        </list>
        <para>
            The W3C's documentation is copyrighted by the W3C, as explained in the
            <a href="http://www.w3.org/Consortium/Legal/2002/copyright-documents-20021231" target="_blank">W3C Document License</a> and the
            <a href="http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231" target="_blank">W3C Software Notice and License</a>.
            </para>
      </remarks>
    </member>
    <member name="T:ModelText.ModelDom.Html.NamespaceDoc">
      <summary>
            This namespace includes interfaces which subclass <see cref="T:ModelText.ModelDom.Nodes.IDomElement" />
            for various specific types of HTML element.
            <para>Most of the interfaces in this namespace are based on a subset of the API
            defined in the W3C <a href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html" target="_blank">Document Object Model (DOM) Level 2 HTML Specification</a>.
            </para><para>
            See
            <a href="d20323c8-e131-4ca0-8421-27e08442a5bc.htm#element-type">Subtypes of the Element Node</a>
            for an overview of the types in this namespace.
            </para></summary>
      <remarks>
        <para>
            Because this API is based on a subset of the W3C's API,
            this documentation is based on a subset of the W3C's documentation:
            </para>
        <list type="bullet">
          <item>
            <description>The description of each interface includes a <strong>hyperlink</strong>
            to the description of the corresponding interface in the W3C documentation.</description>
          </item>
          <item>
            <description>The description of each member of an interface is a <strong>copy and paste</strong>
            of the W3C documentation for the corresponding member of the W3C's interface.</description>
          </item>
        </list>
        <para>
            The W3C's documentation is copyrighted by the W3C, as explained in the
            <a href="http://www.w3.org/Consortium/Legal/2002/copyright-documents-20021231" target="_blank">W3C Document License</a> and the
            <a href="http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231" target="_blank">W3C Software Notice and License</a>.
            </para>
      </remarks>
    </member>
    <member name="T:ModelText.ModelDom.Events.NamespaceDoc">
      <summary>
            This namespace includes interfaces to define event handlers,
            which will be invoked when the end user interacts with the document in the control.
            <para>Most of the interfaces in this namespace are based on a subset of the API
            defined in the W3C <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html" target="_blank">Document Object Model (DOM) Level 2 Events Specification</a>.
            </para><para>
            See
            <a href="d20323c8-e131-4ca0-8421-27e08442a5bc.htm#events">Installing Event Handlers</a>
            for an overview of the types in this namespace.
            </para></summary>
      <remarks>
        <para>
            Because this API is partly based on a subset of the W3C's API,
            this documentation is based on a subset of the W3C's documentation:
            </para>
        <list type="bullet">
          <item>
            <description>The description of each interface includes a <strong>hyperlink</strong>
            to the description of the corresponding interface in the W3C documentation.</description>
          </item>
          <item>
            <description>The description of each member of an interface is a <strong>copy and paste</strong>
            of the W3C documentation for the corresponding member of the W3C's interface.</description>
          </item>
        </list>
        <para>
            The W3C's documentation is copyrighted by the W3C, as explained in the
            <a href="http://www.w3.org/Consortium/Legal/2002/copyright-documents-20021231" target="_blank">W3C Document License</a> and the
            <a href="http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231" target="_blank">W3C Software Notice and License</a>.
            </para>
      </remarks>
    </member>
    <member name="T:ModelText.ModelDom.Range.NamespaceDoc">
      <summary>
            This namespace includes interfaces to interact with (i.e. read, write, and serialize)
            the insertion caret or range, which the end user selects using the mouse or cursor keys.
            <para>Some of the interfaces in this namespace are based on a subset of the API
            defined in the W3C <a href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html" target="_blank">Document Object Model (DOM) Level 2 Traversal and Range Specification</a>.
            </para><para>
            See
            <a href="d20323c8-e131-4ca0-8421-27e08442a5bc.htm#selection">Interacting with the User's Selection</a>
            for an overview of the types in this namespace.
            </para></summary>
      <remarks>
        <para>
            Because this API is partly based on a subset of the W3C's API,
            this documentation is based on a subset of the W3C's documentation:
            </para>
        <list type="bullet">
          <item>
            <description>The description of each interface includes a <strong>hyperlink</strong>
            to the description of the corresponding interface in the W3C documentation.</description>
          </item>
          <item>
            <description>The description of each member of an interface is a <strong>copy and paste</strong>
            of the W3C documentation for the corresponding member of the W3C's interface.</description>
          </item>
        </list>
        <para>
            The W3C's documentation is copyrighted by the W3C, as explained in the
            <a href="http://www.w3.org/Consortium/Legal/2002/copyright-documents-20021231" target="_blank">W3C Document License</a> and the
            <a href="http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231" target="_blank">W3C Software Notice and License</a>.
            </para>
      </remarks>
    </member>
    <member name="T:ModelText.ModelDom.Events.DomEventType">
      <summary>
            The value of the <see cref="P:ModelText.ModelDom.Events.IDomEvent.eventType" />  property.
            </summary>
      <remarks>The mouse event types are described in the W3C
            <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings-mouseevents" target="_blank">Mouse event types</a>
            documentation.
            <para>
            The key events are based on de facto (not official) standard: see
            <a href="http://www.quirksmode.org/dom/events/keys.html" target="_blank">keydown, keypress, keyup</a>
            and 
            <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-eventgroupings-keyevents" target="_blank">Key events</a>.
            </para></remarks>
    </member>
    <member name="F:ModelText.ModelDom.Events.DomEventType.Click">
      <summary>
            The click event occurs when the pointing device button is clicked over an element.
            </summary>
      <remarks>
            A click is defined as a mousedown and mouseup over the same screen location. The sequence of these events is:
            <list type="number"><item><description><see cref="F:ModelText.ModelDom.Events.DomEventType.Mousedown" /></description></item><item><description><see cref="F:ModelText.ModelDom.Events.DomEventType.Mouseup" /></description></item><item><description><c>Click</c></description></item></list></remarks>
    </member>
    <member name="F:ModelText.ModelDom.Events.DomEventType.Mouseover">
      <summary>
            The mouseover event occurs when the pointing device is moved onto an element. This event is valid for most elements.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Events.DomEventType.Mouseout">
      <summary>
            The mouseout event occurs when the pointing device is moved away from an element. This event is valid for most elements.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Events.DomEventType.Mousedown">
      <summary>
            The mousedown event occurs when the pointing device button is pressed over an element. This event is valid for most elements. 
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Events.DomEventType.Mouseup">
      <summary>
            The mouseup event occurs when the pointing device button is released over an element. This event is valid for most elements.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Events.DomEventType.Mousemove">
      <summary>
            The mousemove event occurs when the pointing device is moved while it is over an element. This event is valid for most elements. 
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Events.DomEventType.Keydown">
      <summary>
            The keydown event occurs when the user depresses a key.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Events.DomEventType.Keypress">
      <summary>
            The keypress event occurs when an actual character is being inserted in, for instance, a text input.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Events.DomEventType.Keyup">
      <summary>
            The keyup event occurs when the user releases a key, after the default action of that key has been performed.
            </summary>
    </member>
    <member name="T:ModelText.ModelDom.Nodes.DomNodeType">
      <summary>
            This enumeration defines the type of each node.
            It's the type returned by the
            <see cref="P:ModelText.ModelDom.Nodes.IDomNode.nodeType" /> property.
            </summary>
      <remarks>For further details, see the W3C
            <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1841493061" target="_blank">NodeType</a>
            documentation, for a list of node type values of which this is a subset
            (this API doesn't define or support as many different node types as the W3C API does).
            </remarks>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomNodeType.Element">
      <summary>
            The node is a <see cref="T:ModelText.ModelDom.Nodes.IDomElement" /> instance.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomNodeType.Attribute">
      <exclude />
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomNodeType.Text">
      <summary>
            The node is a <see cref="T:ModelText.ModelDom.Nodes.IDomText" /> instance.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomNodeType.Document">
      <summary>
            The node is a <see cref="T:ModelText.ModelDom.Nodes.IDomDocument" /> instance.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomNodeType.DocumentFragment">
      <summary>
            The node is a <see cref="T:ModelText.ModelDom.Nodes.IDomDocumentFragment" /> instance.
            </summary>
    </member>
    <member name="T:ModelText.ModelDom.Nodes.IDomCharacterData">
      <summary>
            This interface is implemented by all types of node which consist of text or character data.
            In the current version of the API, the only type which subclasses this interface is <see cref="T:ModelText.ModelDom.Nodes.IDomText" />.
            </summary>
      <remarks>For further details, see the W3C
            <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-FF21A306" target="_blank">CharacterData</a>
            documentation.</remarks>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomCharacterData.deleteData(System.Int32,System.Int32)">
      <summary>
            Remove a range of characters from the node.  Upon success, data and length reflect the change.
            </summary>
      <param name="offset">The offset from which to start removing.</param>
      <param name="count">The number of 16-bit units to delete. If the sum of offset and count exceeds length then all 16-bit units from offset to the end of the data are deleted.</param>
      <remarks>This method hasn't been tested yet.
            Also, the other methods of the W3C
            <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-FF21A306" target="_blank">CharacterData</a>
            interface haven't been implemented yet.
            An alternative way to alter character data is to create a new node with the desired data, remove
            the old node entirely, and insert the new node.</remarks>
    </member>
    <member name="T:ModelText.ModelDom.Nodes.IDomNamedNodeMap">
      <summary>
            This interface represents a dictionary of nodes.
            </summary>
      <remarks>
            An instance of this type is returned by the <see cref="P:ModelText.ModelDom.Nodes.IDomNode.attributes" /> property.
            <para>For further details, see the W3C
            <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1780488922" target="_blank">NamedNodeMap</a> documentation.
            </para></remarks>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomNamedNodeMap.getNamedItem(System.String)">
      <summary>
            Retrieves a node specified by name.
            </summary>
      <param name="name">The <see cref="P:ModelText.ModelDom.Nodes.IDomNode.nodeName" /> of a node to retrieve.</param>
      <returns>A <see cref="T:ModelText.ModelDom.Nodes.IDomNode" /> with the specified nodeName, or null if it does not identify any node in this map.</returns>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomNamedNodeMap.setNamedItem(ModelText.ModelDom.Nodes.IDomNode)">
      <summary>
            Adds a node using its <see cref="P:ModelText.ModelDom.Nodes.IDomNode.nodeName" /> attribute.
            </summary>
      <param name="node">A <see cref="T:ModelText.ModelDom.Nodes.IDomNode" /> to store in this map.
            The node will later be accessible using the value of its <see cref="P:ModelText.ModelDom.Nodes.IDomNode.nodeName" /> attribute.</param>
      <returns>If the new <see cref="T:ModelText.ModelDom.Nodes.IDomNode" /> replaces an existing node the replaced <see cref="T:ModelText.ModelDom.Nodes.IDomNode" /> is returned, otherwise <c>null</c> is returned.</returns>
      <remarks>
            If a node with that name is already present in this map, it is replaced by the new one.
            Replacing a node by itself has no effect.
            </remarks>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomNamedNodeMap.removeNamedItem(System.String)">
      <summary>
            Removes a node specified by name.
            </summary>
      <param name="name">The <see cref="P:ModelText.ModelDom.Nodes.IDomNode.nodeName" /> of the node to remove.</param>
      <returns>The <see cref="T:ModelText.ModelDom.Nodes.IDomNode" /> removed from this map if a node with such a name exists.</returns>
      <remarks>
            The following sentence from the original W3C documentation is not true in this API:
            <blockquote>"When this map contains the attributes attached to an element, if the removed attribute is known to have a default value, an attribute immediately appears containing the default value as well as the corresponding namespace URI, local name, and prefix when applicable."</blockquote></remarks>
    </member>
    <member name="P:ModelText.ModelDom.Nodes.IDomNamedNodeMap.items">
      <summary>
            Gets the nodes as an enumeration.
            </summary>
    </member>
    <member name="P:ModelText.ModelDom.Nodes.IDomNamedNodeMap.length">
      <summary>
            The number of nodes in this map.
            </summary>
    </member>
    <member name="T:ModelText.ModelDom.Events.DomEventListener">
      <summary>
            An application-defined event-handler.
            </summary>
      <param name="domEvent">A <see cref="T:ModelText.ModelDom.Events.IDomEvent" /> which represents the event to be handled.</param>
      <remarks>
            An event handler can be installed using the
            <see cref="M:ModelText.ModelDom.Events.IDomEventTarget.addEventListener(ModelText.ModelDom.Events.DomEventType,ModelText.ModelDom.Events.DomEventListener,System.Boolean)" />
            method, or some of the static methods of the
            <see cref="T:ModelText.ModelDom.Events.DomEventListeners" /> class.
            </remarks>
    </member>
    <member name="T:ModelText.ModelDom.Range.IXPointers">
      <summary>
            This interface represents a serialized copy of the ranges in a document.
            </summary>
      <remarks>An instance of this interface is returned by the <see cref="M:ModelText.ModelDom.Range.IWindowSelection.getSerialized" /> method.
            When you reload a document, you can use this interface to preserve and restore the range within the document
            which was selected by the user.
            <para>The implementation of this interface isn't based on the XPath interface, because
            <a href="http://www.w3.org/TR/DOM-Level-3-XPath/xpath.html#XPathExpression" target="_blank">XPathExpression</a>
            is only valid
            within a given document (you can't create one in one document and then use it in another).
            Instead, this interface is implemented using functionality similar to the
            <a href="http://www.w3.org/TR/xptr-element/" target="_blank">XPointer element() Scheme</a>.
            </para></remarks>
      <exclude />
    </member>
    <member name="M:ModelText.ModelDom.Range.IXPointers.setRange(ModelText.ModelDom.Nodes.IDomDocument,ModelText.ModelDom.Range.IDomRange)">
      <summary>
            Sets the passed-in <see cref="T:ModelText.ModelDom.Range.IDomRange" /> instance to the
            </summary>
      <param name="domDocument" />
      <param name="domRange" />
    </member>
    <member name="T:ModelText.ModelDom.Nodes.IDomDocumentFragment">
      <summary>
            This interface defines a document fragment.
            </summary>
      <remarks>Document fragments can be created from scratch using using the
            <see cref="M:ModelText.ModelDom.Nodes.IDomDocument.createDocumentFragment" /> method,
            or extracted from the DOM tree using the
            <see cref="M:ModelText.ModelDom.Range.IDomRange.cloneContents" /> methods.
            <para>For further details, see the W3C's
            <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-B63ED1A3" target="_blank">DocumentFragment</a>
            documentation.
            </para></remarks>
    </member>
    <member name="T:ModelText.ModelDom.Events.DomEventListeners">
      <summary>
            This static class provides some helper methods for installing event listeners.
            </summary>
    </member>
    <member name="M:ModelText.ModelDom.Events.DomEventListeners.installWhere(ModelText.ModelDom.Nodes.IDomDocument,System.Predicate{ModelText.ModelDom.Nodes.IDomNode},ModelText.ModelDom.Events.DomEventType,ModelText.ModelDom.Events.DomEventListener)">
      <summary>
            Installs an event handler into every node which matches the specified predicate.
            </summary>
      <param name="domDocument">The <see cref="T:ModelText.ModelDom.Nodes.IDomDocument" />
            instance which contains the nodes into which event handlers should be installed.</param>
      <param name="isTargetNode">A application-defined predicate which
            specifies whether each node in the document should contain an event handler.</param>
      <param name="domEventType">The type of event for which you want an event handler.</param>
      <param name="domEventHandler">The application-defined method which
            you want to install as an event handler.</param>
      <remarks>
            This methods walks every node in the DOM tree, and installs the event handler into every node
            which matches the predicate.
            Any nodes which may be added to the tree after this method is called will not have an installed event handler.
            Therefore, this method is more suitable for use in Forms, which aren't edited by the end user.
            Instead of using this method, an alternative (perhaps a better alternative) is to install
            the event handler only into the <see cref="T:ModelText.ModelDom.Nodes.IDomDocument" /> node (by invoking its
            <see cref="M:ModelText.ModelDom.Events.IDomEventTarget.addEventListener(ModelText.ModelDom.Events.DomEventType,ModelText.ModelDom.Events.DomEventListener,System.Boolean)" />
            method, and within the event handler applying the <paramref name="isTargetNode" /> predicate to the
            <see cref="P:ModelText.ModelDom.Events.IDomEvent.target" /> property of its
            <see cref="T:ModelText.ModelDom.Events.IDomEvent" /> parameter.
            </remarks>
    </member>
    <member name="M:ModelText.ModelDom.Events.DomEventListeners.install(ModelText.ModelDom.Nodes.IDomNode,ModelText.ModelDom.Events.DomEventType,ModelText.ModelDom.Events.DomEventListener)">
      <summary>
            Simply invokes the underlying
            <see cref="M:ModelText.ModelDom.Events.IDomEventTarget.addEventListener(ModelText.ModelDom.Events.DomEventType,ModelText.ModelDom.Events.DomEventListener,System.Boolean)" />
            method, specifying <c>false</c> as the <c>useCapture</c> parameter.
            </summary>
      <param name="targetNode">The <see cref="T:ModelText.ModelDom.Nodes.IDomNode" /> for which you want to install an event handler.</param>
      <param name="domEventType">The <see cref="T:ModelText.ModelDom.Events.DomEventType" /> for which you want to install an event handler.</param>
      <param name="domEventHandler">The application-defined event handler which you want to install.</param>
      <remarks>
            Capture happens before bubbling,
            (as explained in the W3C description of
            <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow" target="_blank">event flow</a>).
            This method invokes the <c>addListener</c> method with the <c>useCapture</c> parameter set to <c>false</c>:
            so an event handler installed in this way will be fired after other application-installed event handlers,
            but before any default event handlers.
            </remarks>
    </member>
    <member name="M:ModelText.ModelDom.Events.DomEventListeners.onFormSubmitted(ModelText.ModelDom.Nodes.IDomDocument,System.Action{System.String})">
      <summary>
            Installs an event handler to handle the 'Submit' event of a form.
            </summary>
      <param name="domDocument">The <see cref="T:ModelText.ModelDom.Nodes.IDomDocument" /> instance which contains a <c>&lt;form&gt;</c> element.</param>
      <param name="action">The application-defined event handler. This method takes a string as a parameter:
            the value of this string is the value of the <c>&lt;form&gt;</c> element's <c>action</c> attribute.</param>
      <remarks>
        <para>See the description of the
            <c>formDataset</c> property of the <c>IModelEdit</c> interface in the <c>ModelText.ModelEditControl</c> namespace,
            for an example of an application-defined method which can be installed using this API.</para>
      </remarks>
    </member>
    <member name="M:ModelText.ModelDom.Events.DomEventListeners.onAnchor(ModelText.ModelDom.Nodes.IDomDocument,ModelText.ModelDom.Events.DomEventType,System.Action{System.String})">
      <summary>
            Installs one or more event handlers to handle event associated with <c>&lt;a&gt;</c> anchor elements in a document.
            </summary>
      <param name="domDocument">The <see cref="T:ModelText.ModelDom.Nodes.IDomDocument" /> instance which contains <c>&lt;a&gt;</c> elements.</param>
      <param name="domEventType">The <see cref="T:ModelText.ModelDom.Events.DomEventType" /> for which you want to install an event handler.</param>
      <param name="anchorHref">The application-defined event handler. This method takes a string as a parameter:
            the value of this string is the value of the <c>&lt;a&gt;</c> element's <c>href</c> attribute.</param>
    </member>
    <member name="T:ModelText.ModelDom.Range.IWindowSelection">
      <summary>
            This interface represents one or ranges which are
            selected n the control's user interface, and visible to the end user.
            </summary>
      <remarks>
            This interface isn't based on a W3C standard.
            Instead it's based on de facto interfaces from various browsers.
            It represents the object that's returned when you invoke the javascript <c>window.getSelection()</c> method
            as described
            at <a href="http://www.quirksmode.org/dom/range_intro.html" target="_blank">Introduction to Range</a>.
            <para>
            The Microsoft Internet Explorer version of this interface is the DHTML
            <a href="http://msdn.microsoft.com/en-us/library/ms535869(VS.85).aspx" target="_blank">selection Object</a>
            in the Microsoft API.
            </para><para>
            However this interface is based more on the Mozilla API (instead of the MS IE API).
            The Mozilla interface can be found at
            <a href="http://mxr.mozilla.org/mozilla/source/content/base/public/nsISelection.idl" target="_blank">nsISelection.idl</a>
            and
            <a href="https://developer.mozilla.org/en/DOM/Selection" target="_blank">Selection</a>.
            </para></remarks>
    </member>
    <member name="M:ModelText.ModelDom.Range.IWindowSelection.getRangeAt(System.Int32)">
      <summary>
            Returns the <see cref="T:ModelText.ModelDom.Range.IDomRange" /> at the specified index, which represents a copy of the user's current selection.
            </summary>
      <remarks>
            The copy is not synchronized: if the user changes the selection (using the mouse and/or cursor keys), the
            copy is not updated automatically.
            It is probably better to get a new IDomRange instance whenever you need it, use it, and then release it as soon as possibly
            (almost immediately).
            <para>When you have finished with the IDomRange instance, invoke its <see cref="M:ModelText.ModelDom.Range.IDomRange.detach" />
            or <see cref="M:System.IDisposable.Dispose" /> method.
            </para></remarks>
      <param name="index">An index which specifies which of several ranges should be returned.</param>
      <returns>A <see cref="T:ModelText.ModelDom.Range.IDomRange" /> instance which represents the selection.</returns>
      <remarks>In the current version of the control,
            the <see cref="P:ModelText.ModelDom.Range.IWindowSelection.rangeCount" /> will always be <c>1</c> and so the
            <paramref name="index" /> should always be <c>0</c>.</remarks>
    </member>
    <member name="M:ModelText.ModelDom.Range.IWindowSelection.collapse(ModelText.ModelDom.Nodes.IDomNode,System.Int32)">
      <summary>
            Collapses the selection to a single point, at the specified offset
            in the given DOM node. When the selection is collapsed, and the content
            is focused and editable, the caret will blink there.
            </summary>
      <param name="parentNode">The given <see cref="T:ModelText.ModelDom.Nodes.IDomNode" /> where the selection will be set</param>
      <param name="offset">Where in <paramref name="parentNode" /> to place the selection (the offset into the given node)</param>
    </member>
    <member name="M:ModelText.ModelDom.Range.IWindowSelection.extend(ModelText.ModelDom.Nodes.IDomNode,System.Int32)">
      <summary>
            Extends the selection by moving the selection end to the specified node and offset,
            preserving the selection begin position. The new selection end result will always
            be from the anchorNode to the new focusNode, regardless of direction.
            </summary>
      <param name="parentNode">The <see cref="T:ModelText.ModelDom.Nodes.IDomNode" /> where the selection will be extended to</param>
      <param name="offset">Where in <paramref name="parentNode" /> to place the offset in the new selection end</param>
    </member>
    <member name="M:ModelText.ModelDom.Range.IWindowSelection.getSerialized">
      <summary>
            Returns a serialized copy of the locations of the ranges.
            </summary>
      <returns>A <see cref="T:ModelText.ModelDom.Range.IXPointers" /> which contains a serialized copy of the locations of the ranges.</returns>
      <exclude />
    </member>
    <member name="P:ModelText.ModelDom.Range.IWindowSelection.rangeCount">
      <summary>
            Returns the number of ranges in the selection.
            </summary>
    </member>
    <member name="T:ModelText.ModelDom.Nodes.IDomDocument">
      <summary>
            This interface is implemented by the root node of the DOM tree.
            </summary>
      <remarks>
            An instance of this interface is returned by the
            <c>ModelText.ModelEditControl.IModelEdit.domDocument</c>
            property of the
            <c>ModelText.ModelEditControl.IModelEdit</c>
            interface.
            <para>For further details, see the W3C
            <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#i-Document" target="_blank">Document</a>
            documentation.</para></remarks>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomDocument.createDocumentFragment">
      <summary>
            Creates an empty <see cref="T:ModelText.ModelDom.Nodes.IDomDocumentFragment" /> object.
            </summary>
      <returns>A new <see cref="T:ModelText.ModelDom.Nodes.IDomDocumentFragment" />.</returns>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomDocument.createElement(System.String)">
      <summary>
            Creates an element of the type specified.
            Note that the instance returned implements the <see cref="T:ModelText.ModelDom.Nodes.IDomElement" /> interface, so attributes can be specified directly on the returned object.
            </summary>
      <param name="tagName">The name of the element type to instantiate.
            </param>
      <returns>A new <see cref="T:ModelText.ModelDom.Nodes.IDomElement" /> object with the nodeName attribute set to tagName, and localName, prefix, and namespaceURI set to null.</returns>
      <remarks>The following sentences, which are in the original W3C documentation, are not true.
            <blockquote>"In addition, if there are known attributes with default values, Attr nodes representing them are automatically created and attached to the element."</blockquote><para>This is untrue for two reasons:</para><list type="bullet"><item><description>There are no default attribute values (except 'null').</description></item><item><description>Attributes aren't represented as 'Attr nodes' in the tree, which can be accessed using the
            <see cref="P:ModelText.ModelDom.Nodes.IDomNode.childNodes" /> property.
            Instead, attribute values can be accessed only via the
            <see cref="M:ModelText.ModelDom.Nodes.IDomElement.getAttribute(System.String)" /> and
            <see cref="M:ModelText.ModelDom.Nodes.IDomElement.setAttribute(System.String,System.String)" />
            methods.</description></item></list><blockquote>"For XML, this is case-sensitive, otherwise it depends on the case-sensitivity of the markup language in use.
            In that case, the name is mapped to the canonical form of that markup by the DOM implementation."</blockquote><para>This is untrue because in XHTML the tagName is always case-sensitive: it must be lower-case.</para></remarks>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomDocument.createTextNode(System.String)">
      <summary>
            Creates a <see cref="T:ModelText.ModelDom.Nodes.IDomText" /> node given the specified string.
            </summary>
      <param name="data">The data for the node.</param>
      <returns>The new <see cref="T:ModelText.ModelDom.Nodes.IDomText" /> object.</returns>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomDocument.getElementById(System.String)">
      <summary>
            Returns the <see cref="T:ModelText.ModelDom.Nodes.IDomElement" /> that has an ID attribute with the given value.
            </summary>
      <param name="elementId">The unique id value for an element.</param>
      <returns>The matching element or null if there is none.</returns>
      <remarks>
            If no such element exists, this returns null.
            If more than one element has an ID attribute with that value, what is returned is undefined. 
            <para>The following sentence, which is in the original W3C documentation, is not true:</para><blockquote>"The DOM implementation is expected to use the attribute Attr.isId to determine if an attribute is of type ID.
            Note: Attributes with the name "ID" or "id" are not of type ID unless so defined."</blockquote><para>This is untrue because, using XHTML, the 'ID attribute' is the automatically attribute whose name is "id".</para></remarks>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomDocument.setTestIsReadonly(System.Predicate{ModelText.ModelDom.Nodes.IDomNode})">
      <summary>
            Lets you install an application-defined method,
            which lets you specify that some nodes in the DOM should to be read-only or uneditable.
            </summary>
      <param name="testIsReadonly">This is an application-defined method, a predicate.
            This application-defined predicate should return <c>true</c>, if the specified <see cref="T:ModelText.ModelDom.Nodes.IDomNode" />
            instance which is passed to it as a parameter should be read-only.</param>
      <remarks>
            If a predicate is installed using this method, and if the predicate returns <c>true</c>
            to specify that an element is read-only,
            then the end-user cannot place the insertion caret inside that element:
            <list type="bullet"><item><description>Clicking on the element results in the whole element being selected</description></item><item><description>Using the cursor keys moves the cursor over or past the whole element, as if
            the whole element were a single indivisible block of text (which it is)</description></item><item><description>When the whole element is selected, the end user can delete the
            whole element: but cannot modify the element.</description></item></list><para>
            This does not correspond to a W3C-standard API.
            The W3C's
            <a href="http://www.w3.org/2001/10/23-DOMOpenList" target="_blank">Open Issues List</a>
            mentions "adding an isReadonly flag to the Node interface".
            See also
            <a href="http://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-eventgroupings-mutationevents" target="_blank">Mutation and mutation name event types</a> which said,
            </para><blockquote>
            "The mutation and mutation name event modules are designed to allow notification of any changes to the structure of a document,
            including attribute, text, or name modifications.
            It may be noted that none of the event types associated with the modules are designated as cancelable.
            This stems from the fact that it is very difficult to make use of existing DOM interfaces which cause
            document modifications if any change to the document might or might not take place due to cancelation of the resulting event.
            Although this is still a desired capability, it was decided that it would be better left until the
            addition of transactions into the DOM."
            </blockquote><para>These two quotes imply that it's useful to be able to to prevent a document modification: and that's what this method lets you do.</para></remarks>
      <example>
            The following is an example of a method, which can be passed as the <paramref name="testIsReadonly" /> parameter
            to the <c>setTestIsReadonly</c> method.
            This method returns <c>true</c>, if the specified <see cref="T:ModelText.ModelDom.Nodes.IDomNode" />
            instance is an anchor element, to prevent the end user from editing the contents of any anchor element.
            <code>
             static bool isAnchorTag(IDomNode domNode)
             {
                 if (domNode.nodeType == DomNodeType.Element)
                 {
                     IDomElement domElement = (IDomElement)domNode;
            
                     //return true iff the node is an anchor tag
                     if (domElement.tagName == "a")
                     {
                         return true;
                     }
                 }
                 return false;
             }
            </code></example>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomDocument.setTestAllowInline(ModelText.ModelDom.Events.TestAllowInline)">
      <summary>
            Like setTestIsReadonly this too does not correspond to a W3C-standard API.
            This method lets the application install a delegate which, if it returns true,
            specifies that a node is not allowed to contain inline tags (and instead can only contain IDomText nodes).
            Any restriction on inline children that's specified by this method is in addition to
            any restriction that's specified by the XHTML schema.
            The ModelTextApplication uses this to specify that headings can contain only text.
            </summary>
      <param name="testAllowInline" />
      <exclude />
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomDocument.addDefaultEventListener(ModelText.ModelDom.Events.DomEventType,ModelText.ModelDom.Events.DomEventListener)">
      <summary>
            Lets you install an event handler, which will help to implement the control's default event handling.
            </summary>
      <remarks>
            This method lets the application install a default event handler, whose activation can be cancelled
            by the <see cref="M:ModelText.ModelDom.Events.IDomEvent.preventDefault" /> method.
            <para>
            This method is not part of the standard W3C DOM API.
            This method exists to help implement the 'default' event handling which a browser should implement: for example,
            a W3C topic titled
            <a href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010823/events.html#Events-flow-cancelation" target="_blank">Event cancelation</a> says,
            </para><blockquote>
            "An example of this is a hyperlink in a web browser.
            When the user clicks on the hyperlink the default action is generally to active that hyperlink."
            </blockquote><para>There are two standard behaviours which are implemented by a typical web browser,
            and which cannot be implemented by the control without some application-defined event handler:</para><list type="bullet"><item><description>Submitting the contents of a web Form, when the user clicks on the Submit button</description></item><item><description>Navigating to the target of a hyperlink, when the user clicks on an anchor</description></item></list><para>To install event handlers for these methods, use the
            <see cref="M:ModelText.ModelDom.Events.DomEventListeners.onAnchor(ModelText.ModelDom.Nodes.IDomDocument,ModelText.ModelDom.Events.DomEventType,System.Action{System.String})" /> and
            <see cref="M:ModelText.ModelDom.Events.DomEventListeners.onFormSubmitted(ModelText.ModelDom.Nodes.IDomDocument,System.Action{System.String})" /> methods of the
            <see cref="T:ModelText.ModelDom.Events.DomEventListeners" /> class (which are implemented by invoking this method).
            </para></remarks>
      <param name="domEventType">The type of event which the specified listener is willing to handle.</param>
      <param name="domEventListener">An application-defined method, which accepts
            a <see cref="T:ModelText.ModelDom.Events.IDomEvent" /> instance as a parameter.</param>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomDocument.getStyle(ModelText.ModelDom.Nodes.IDomElement)">
      <summary>
            This method is not part of the standard API.
            This emulates the currentStyle property in IE, and/or the getComputedStyle method in Mozilla.
            For further details and examples, see
            http://www.quirksmode.org/dom/getstyles.html
            and/or http://robertnyman.com/2006/04/24/get-the-rendered-style-of-an-element/
            </summary>
      <param name="domElement" />
      <returns />
      <exclude />
    </member>
    <member name="T:ModelText.ModelDom.Html.IHtmlTextAreaElement">
      <summary>
            This interface represents an HTML <c>&lt;textarea&gt;</c> element.
            </summary>
      <remarks>For further details, see the W3C
            <a href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-24874179" target="_blank">HTMLTextAreaElement</a>
            documentation.
            </remarks>
    </member>
    <member name="P:ModelText.ModelDom.Html.IHtmlTextAreaElement.value">
      <summary>
            Represents the current contents of the corresponding form control, in an interactive user agent.
            </summary>
      <remarks>
            Changing this attribute changes the contents of the form control, but does not change the contents of the element.
            If the entirety of the data can not fit into a single DOMString, the implementation may truncate the data.
            </remarks>
    </member>
    <member name="P:ModelText.ModelDom.Html.IHtmlTextAreaElement.name">
      <summary>
            Form control or object name when submitted with a form.
            </summary>
      <remarks>
            See the
            <a href="http://www.w3.org/TR/1999/REC-html401-19991224/interact/forms.html#adef-name-TEXTAREA" target="_blank">name attribute definition</a>
            in HTML 4.01.
            </remarks>
    </member>
    <member name="T:ModelText.ModelDom.Nodes.IDomListT`1">
      <summary>
            This interface represents a list of nodes.
            </summary>
      <typeparam name="T">This is the type of item on the list,
            which is actually a <see cref="T:ModelText.ModelDom.Nodes.IDomNode" />.</typeparam>
      <remarks>
            This is a read-only interface: you can use it to read the
            collection but not to change the collection.
            An instance of this type is returned by the <see cref="P:ModelText.ModelDom.Nodes.IDomNode.childNodes" /> property.
            <para>For further details, see the W3C
            <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-536297177" target="_blank">NodeList</a>
            documentation.
            </para></remarks>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomListT`1.itemAt(System.Int32)">
      <summary>
            Returns the specified item in the collection.
            </summary>
      <param name="index">The index into the collection (for example, <c>0</c> to get the first item).</param>
      <returns>The item at the specified location in the list.</returns>
      <remarks>
        <note type="caution">The W3C documentation says,
            "If index is greater than or equal to the number of nodes in the list, this returns null."
            However in this API, passing in an invalid index value will result instead in an exception being thrown.</note>
      </remarks>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomListT`1.indexOf(`0)">
      <summary>
            Returns the location (index) of the specified item in the list.
            </summary>
      <param name="item">A reference to an instance contained in the collection.</param>
      <returns>The zero-based index of the item in the collection.</returns>
      <remarks>This method throws <see cref="F:ModelText.ModelDom.Nodes.DomException.Code.NOT_FOUND_ERR" /> if the specified item cannot be found</remarks>.
        </member>
    <member name="P:ModelText.ModelDom.Nodes.IDomListT`1.elements">
      <summary>
            Gets the list of items as an enumeration.
            </summary>
    </member>
    <member name="P:ModelText.ModelDom.Nodes.IDomListT`1.count">
      <summary>
            The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.
            </summary>
    </member>
    <member name="T:ModelText.ModelDom.Events.TestAllowInline">
      <summary>
            A method of this type can be passed as a parameter to the IDomDocument.setTestAllowInline method.
            </summary>
      <param name="domElement">The DomElement instance which may or may not be allowed to contain inline elements.</param>
      <param name="elementTagName">The tag name which should be imputed to this element (which may match the
            value of the element's current tag name).</param>
      <returns />
      <exclude />
    </member>
    <member name="T:ModelText.ModelDom.Events.DomEventPhase">
      <summary>
            The value of the <see cref="P:ModelText.ModelDom.Events.IDomEvent.eventPhase" />  property.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Events.DomEventPhase.Bubbling">
      <summary>
            The current event phase is the bubbling phase.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Events.DomEventPhase.Capturing">
      <summary>
            The current event phase is the capturing phase.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Events.DomEventPhase.AtTarget">
      <summary>
            The event is currently being evaluated at the target.
            </summary>
    </member>
    <member name="T:ModelText.ModelDom.Nodes.IDomText">
      <summary>
            This interface represents a text node.
            </summary>
      <remarks>For further details, see the W3C
            <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1312295772" target="_blank">Text</a>
            documentation.
            </remarks>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.IDomText.splitText(System.Int32)">
      <summary>
            Breaks this node into two nodes at the specified offset, keeping both in the tree as siblings.
            </summary>
      <param name="offset">The offset at which to split, starting from 0.</param>
      <returns>The new node, of the same type as this node.</returns>
      <remarks>
            After being split, this node will contain all the content up to the offset point.
            A new node of the same type, which contains all the content at and after the offset point, is returned.
            If the original node had a parent node, the new node is inserted as the next sibling of the original node.
            When the offset is equal to the length of this node, the new node has no data.
            </remarks>
    </member>
    <member name="T:ModelText.ModelDom.Html.IHtmlSelectElement">
      <summary>
            This interface represents an HTML <c>&lt;select&gt;</c> element.
            </summary>
      <remarks>For further details, see the W3C
            <a href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-94282980" target="_blank">HTMLSelectElement</a>
            documentation.
            </remarks>
    </member>
    <member name="T:ModelText.ModelDom.Range.IDomRange">
      <summary>
            This interface represents a selected range within the document tree.
            </summary>
      <remarks>This interface implements a subset of the W3C
            <a href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-idl" target="_blank">Range</a>
            interface.
            <para>You can use the <see cref="M:ModelText.ModelDom.Range.IWindowSelection.getRangeAt(System.Int32)" /> method to get an instance of this class.</para></remarks>
    </member>
    <member name="M:ModelText.ModelDom.Range.IDomRange.detach">
      <summary>
            Called to indicate that the Range is no longer in use and that the implementation
            may relinquish any resources associated with this Range.
            </summary>
      <remarks>
            After to call this method, any subsequent calls to any methods or attribute getters on this Range will result in
            a
            <see cref="T:ModelText.ModelDom.Nodes.DomException" /> being thrown with an error code of
            <see cref="F:ModelText.ModelDom.Nodes.DomException.Code.INVALID_STATE_ERR" />.
            <para>
            You should invoke this method as soon as possible.
            Range instances should not be long-lived, because they may end up pointing to nodes which don't exist in the document
            (e.g. after the user does some 'Undo' operations).
            Instead, you should probably instantiate a Range instance, use it, and then detach it, all within the scope of a single
            synchronous event handler.
            </para><para>The IDomRange interface also implements the IDisposable interface, and the Dispose method invokes the detach method.
            </para></remarks>
    </member>
    <member name="M:ModelText.ModelDom.Range.IDomRange.insertNode(ModelText.ModelDom.Nodes.IDomNode)">
      <summary>
            Inserts a node into the <see cref="T:ModelText.ModelDom.Nodes.IDomDocument" /> or <see cref="T:ModelText.ModelDom.Nodes.IDomDocumentFragment" /> at the start of the Range.
            </summary>
      <param name="newNode">The <see cref="T:ModelText.ModelDom.Nodes.IDomNode" /> to be inserted.</param>
      <remarks>
            If the container is a <see cref="T:ModelText.ModelDom.Nodes.IDomText" /> node, this will be split at the start of the Range
            (as if the Text node's <see cref="M:ModelText.ModelDom.Nodes.IDomText.splitText(System.Int32)" /> method was performed at the insertion point)
            and the insertion will occur between the two resulting Text nodes.
            Adjacent Text nodes will not be automatically merged.
            If the node to be inserted is a <see cref="T:ModelText.ModelDom.Nodes.IDomDocumentFragment" /> node, the children will be inserted
            rather than the DocumentFragment node itself. 
            </remarks>
    </member>
    <member name="M:ModelText.ModelDom.Range.IDomRange.deleteContents">
      <summary>
            Removes the contents of a Range from the containing document or document fragment
            without returning a reference to the removed content.
            </summary>
    </member>
    <member name="M:ModelText.ModelDom.Range.IDomRange.cloneContents">
      <summary>
            Duplicates the contents of a Range 
            </summary>
      <returns>A <see cref="T:ModelText.ModelDom.Nodes.IDomDocumentFragment" /> that contains content equivalent to this Range.</returns>
    </member>
    <member name="M:ModelText.ModelDom.Range.IDomRange.setStart(ModelText.ModelDom.Nodes.IDomNode,System.Int32)">
      <summary>
            Sets the attributes describing the start of the Range.
            </summary>
      <param name="parent">Thew new <see cref="P:ModelText.ModelDom.Range.IDomRange.startContainer" /> value.</param>
      <param name="offset">Thew new <see cref="P:ModelText.ModelDom.Range.IDomRange.startOffset" /> value.</param>
    </member>
    <member name="M:ModelText.ModelDom.Range.IDomRange.setEnd(ModelText.ModelDom.Nodes.IDomNode,System.Int32)">
      <summary>
            Sets the attributes describing the end of the Range.
            </summary>
      <param name="parent">Thew new <see cref="P:ModelText.ModelDom.Range.IDomRange.endContainer" /> value.</param>
      <param name="offset">Thew new <see cref="P:ModelText.ModelDom.Range.IDomRange.endOffset" /> value.</param>
    </member>
    <member name="P:ModelText.ModelDom.Range.IDomRange.startContainer">
      <summary>
        <see cref="T:ModelText.ModelDom.Nodes.IDomNode" /> within which the Range begins.
            </summary>
      <remarks>
            See the
            <a href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Position" target="_blank">Position</a>
            documentation for a description of the boundary points of a range instance.
            </remarks>
    </member>
    <member name="P:ModelText.ModelDom.Range.IDomRange.startOffset">
      <summary>
            Offset within the starting node of the Range.
            </summary>
      <remarks>
            See the
            <a href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Position" target="_blank">Position</a>
            documentation for a description of the boundary points of a range instance.
            </remarks>
    </member>
    <member name="P:ModelText.ModelDom.Range.IDomRange.endContainer">
      <summary>
        <see cref="T:ModelText.ModelDom.Nodes.IDomNode" /> within which the Range ends.
            </summary>
      <remarks>
            See the
            <a href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Position" target="_blank">Position</a>
            documentation for a description of the boundary points of a range instance.
            </remarks>
    </member>
    <member name="P:ModelText.ModelDom.Range.IDomRange.endOffset">
      <summary>
            Offset within the ending node of the Range.
            </summary>
      <remarks>
            See the
            <a href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Position" target="_blank">Position</a>
            documentation for a description of the boundary points of a range instance.
            </remarks>
    </member>
    <member name="P:ModelText.ModelDom.Range.IDomRange.collapsed">
      <summary>
            Returns true if the range is collapsed, i.e. if
            <see cref="P:ModelText.ModelDom.Range.IDomRange.startContainer" /> equals <see cref="P:ModelText.ModelDom.Range.IDomRange.endContainer" /> and
            <see cref="P:ModelText.ModelDom.Range.IDomRange.startOffset" /> equals <see cref="P:ModelText.ModelDom.Range.IDomRange.endOffset" />.
            </summary>
    </member>
    <member name="T:ModelText.ModelDom.Html.IHtmlFormElement">
      <summary>
            This interface represents an HTML <c>&lt;form&gt;</c> element.
            </summary>
      <remarks>For further details, see the W3C
            <a href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-40002357" target="_blank">HTMLFormElement</a>
            documentation.
            </remarks>
    </member>
    <member name="M:ModelText.ModelDom.Html.IHtmlFormElement.serialize">
      <summary>
            Serializes the contents of the form's sucessful controls into a string of data.
            </summary>
      <returns>A text string in standard URL-encoded notation.</returns>
      <remarks>
            Serialize is typically used to prepare user input data to be posted to a server.
            The serialized data is in a standard format that is compatible with almost all server side programming languages and frameworks. 
            In order to work properly serialize requires that form fields have a name attribute.
            Having only an id will not work.
            <para>
            This isn't a method in the W3C standard; instead it's analogous to the
            <a href="http://docs.jquery.com/Ajax/serialize" target="_blank">jQuery serialize method</a>.
            </para><para>This method returns the same string as the
            <c>formDataset</c> property of the <c>IModelEdit</c> interface in the <c>ModelText.ModelEditControl</c> namespace.</para></remarks>
    </member>
    <member name="T:ModelText.ModelDom.Events.IDomEvent">
      <summary>
            This interface represents an event, instances of which are passed to
            application-defined <see cref="T:ModelText.ModelDom.Events.DomEventListener" /> event handlers.
            </summary>
      <remarks>
            For further details, see the W3C
            <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-Event" target="_blank">Event</a>
            documentation.
            </remarks>
    </member>
    <member name="M:ModelText.ModelDom.Events.IDomEvent.stopPropagation">
      <summary>
            The stopPropagation method is used prevent further propagation of an event during event flow.
            </summary>
      <remarks>
             If this method is called by any EventListener the event will cease propagating through the tree. The event will complete dispatch to all listeners on the current EventTarget before event flow stops. This method may be used during any stage of event flow.
            </remarks>
    </member>
    <member name="M:ModelText.ModelDom.Events.IDomEvent.preventDefault">
      <summary>
            If an event is cancelable, the preventDefault method is used to signify that the event is to be canceled, meaning any default action normally taken by the implementation as a result of the event will not occur.
            </summary>
      <remarks>
            If, during any stage of event flow, the preventDefault method is called the event is canceled. Any default action associated with the event will not occur. Calling this method for a non-cancelable event has no effect. Once preventDefault has been called it will remain in effect throughout the remainder of the event's propagation. This method may be used during any stage of event flow.
            </remarks>
    </member>
    <member name="P:ModelText.ModelDom.Events.IDomEvent.eventType">
      <summary>
            A <see cref="T:ModelText.ModelDom.Events.DomEventType" /> indicating what type of event is being processed.
            </summary>
    </member>
    <member name="P:ModelText.ModelDom.Events.IDomEvent.eventPhase">
      <summary>
            A <see cref="T:ModelText.ModelDom.Events.DomEventPhase" /> indicating which phase of event flow is being processed.
            </summary>
    </member>
    <member name="P:ModelText.ModelDom.Events.IDomEvent.target">
      <summary>
            Used to indicate the EventTarget to which the event was originally dispatched.
            </summary>
    </member>
    <member name="P:ModelText.ModelDom.Events.IDomEvent.currentTarget">
      <summary>
            Used to indicate the <see cref="T:ModelText.ModelDom.Events.IDomEventTarget" /> whose EventListeners are currently being processed. 
            </summary>
      <remarks>
            This is particularly useful during capturing and bubbling.
            </remarks>
    </member>
    <member name="P:ModelText.ModelDom.Events.IDomEvent.bubbles">
      <summary>
            Used to indicate whether or not an event is a bubbling event.
            </summary>
      <remarks>
            If the event can bubble the value is true, else the value is false.
            </remarks>
    </member>
    <member name="P:ModelText.ModelDom.Events.IDomEvent.cancelable">
      <summary>
            Used to indicate whether or not an event can have its default action prevented.
            </summary>
      <remarks>
            If the default action can be prevented the value is true, else the value is false.
            </remarks>
    </member>
    <member name="T:ModelText.ModelDom.Events.IDomKeyEvent">
      <summary>
            This interface defines properties associated with the
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Keypress" />,
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Keydown" />, and
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Keyup" /> events.
            </summary>
      <remarks>
            These properties are non-standard.
            These two properties are the least-common-denominator which are supported de facto by all browsers,
            as described in
            <a href="http://www.quirksmode.org/js/keys.html" target="_blank">Detecting keystrokes</a>.
            <para>
            This API ignores the
            <a href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Level-3-Events-KeyEvents-Interfaces" target="_blank">DOM level 3 key event interface</a>.
            </para></remarks>
    </member>
    <member name="P:ModelText.ModelDom.Events.IDomKeyEvent.keyCode">
      <summary>
            This is the Windows-specific virtual key code which identifies the keyboard scancode.
            </summary>
      <remarks>
            This property is numerically identical to the Windows.System.Forms.Keys enumeration: see
            <a href="http://stackoverflow.com/questions/554015" target="_blank">How to convert from Virtual Key codes to System.Windows.Forms.Keys</a>.
            This property is valid in the
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Keydown" /> and
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Keyup" /> events,
            and should be ignored (contains null) in the
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Keypress" />
            events.
            This value comes from the <c>KeyCode</c> property of the <c>KeyEventArgs</c> class.
            </remarks>
    </member>
    <member name="P:ModelText.ModelDom.Events.IDomKeyEvent.charCode">
      <summary>
            This property is valid in the Keypress events, and should be ignored (contains null) in the Keydown and Keyup events.
            </summary>
    </member>
    <member name="T:ModelText.ModelDom.Events.MouseButton">
      <summary>
            This enumeration is used in the <see cref="P:ModelText.ModelDom.Events.IDomMouseEvent.button" /> property
            to identify which mouse button generated the event.
            </summary>
      <remarks>
            Unlike the <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-MouseEvent" target="_blank">W3C MouseEvent</a>
            specification, the values for the buttons are 1, 2, and 4 instead of 0, 1, and 2; and, more than one value occurs simultaneously,
            if more than one mouse button is pressed.
            This is similar to the <c>System.Windows.Forms.MouseButtons</c> flags which are passed in
            the <c>System.Windows.Forms.MouseEventArgs</c>.
            </remarks>
    </member>
    <member name="F:ModelText.ModelDom.Events.MouseButton.None">
      <summary>
            None of the mouse buttons.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Events.MouseButton.Left">
      <summary>
            The left mouse button.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Events.MouseButton.Middle">
      <summary>
            The middle mouse button (if present).
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Events.MouseButton.Right">
      <summary>
            The right mouse button.
            </summary>
    </member>
    <member name="T:ModelText.ModelDom.Events.IDomMouseEvent">
      <summary>
            This interface defines properties associated with the
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Click" />,
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Mouseover" />,
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Mouseout" />,
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Mousedown" />,
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Mouseup" />, and
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Mousemove" /> events.
            </summary>
      <remarks>
            For further details, see the W3C
            <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-MouseEvent" target="_blank">MouseEvent</a>
            documentation.
            <para>
            You can cancel
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Click" />,
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Mousedown" />, and
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Mouseup" /> events
            (by using the <see cref="M:ModelText.ModelDom.Events.IDomEvent.preventDefault" /> method),
            but not the
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Mouseover" />, 
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Mouseout" />, and
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Mousemove" /> events.
            </para></remarks>
    </member>
    <member name="P:ModelText.ModelDom.Events.IDomMouseEvent.button">
      <summary>
            During mouse events caused by the depression or release of a mouse button, button is used to indicate which mouse button changed state.
            The values for button range from zero to indicate the left button of the mouse, one to indicate the middle button if present, and two to indicate the right button.
            </summary>
      <remarks>
            This property is valid in the
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Click" />,
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Mousedown" />, and
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Mouseup" /> events,
            and is null in the
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Mouseover" />, 
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Mouseout" />, and
            <see cref="F:ModelText.ModelDom.Events.DomEventType.Mousemove" /> events.
            </remarks>
    </member>
    <member name="P:ModelText.ModelDom.Events.IDomMouseEvent.shiftKey">
      <summary>
            Used to indicate whether the 'shift' key was depressed during the firing of the event.
            </summary>
    </member>
    <member name="P:ModelText.ModelDom.Events.IDomMouseEvent.ctrlKey">
      <summary>
            Used to indicate whether the 'ctrl' key was depressed during the firing of the event.
            </summary>
    </member>
    <member name="P:ModelText.ModelDom.Events.IDomMouseEvent.altKey">
      <summary>
            Used to indicate whether the 'alt' key was depressed during the firing of the event.
            </summary>
    </member>
    <member name="T:ModelText.ModelDom.Nodes.IEditorTransaction">
      <summary>
            The purpose of this interface is to group several edit actions into a logically-single operation.
            Without this, each action would undo one at a time.
            With this, a single undo will affect all actions in the transaction
            </summary>
    </member>
    <member name="T:ModelText.ModelDom.Nodes.DomException">
      <summary>
            An instance of this class may be thrown as an exception, if the application mis-uses the API in some way.
            </summary>
      <remarks>For further details, see
            the W3C
            <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-17189187" target="_blank">DOMException</a>
            documentation.
            </remarks>
    </member>
    <member name="M:ModelText.ModelDom.Nodes.DomException.#ctor(ModelText.ModelDom.Nodes.DomException.Code)">
      <exclude />
    </member>
    <member name="P:ModelText.ModelDom.Nodes.DomException.code">
      <summary>
            This property returns a <see cref="T:ModelText.ModelDom.Nodes.DomException.Code" /> value
            which indicates the cause of this exception instance.
            </summary>
    </member>
    <member name="T:ModelText.ModelDom.Nodes.DomException.Code">
      <summary>
            This enum represents the various code which indicate the type of error
            that is indicated when a <see cref="T:ModelText.ModelDom.Nodes.DomException" /> instance is thrown.
            </summary>
      <remarks>For further details, see
            the W3C
            <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-258A00AF" target="_blank">ExceptionCode</a>
            documentation.
            </remarks>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomException.Code.INDEX_SIZE_ERR">
      <summary>
            If index or size is negative, or greater than the allowed value.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomException.Code.DOMSTRING_SIZE_ERR">
      <summary>
            If the specified range of text does not fit into a DOMString.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomException.Code.HIERARCHY_REQUEST_ERR">
      <summary>
            If any Node is inserted somewhere it doesn't belong.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomException.Code.WRONG_DOCUMENT_ERR">
      <summary>
            If a Node is used in a different document than the one that created it (that doesn't support it).
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomException.Code.INVALID_CHARACTER_ERR">
      <summary>
            If an invalid or illegal character is specified, such as in an XML name.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomException.Code.NO_DATA_ALLOWED_ERR">
      <summary>
            If data is specified for a Node which does not support data.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomException.Code.NO_MODIFICATION_ALLOWED_ERR">
      <summary>
            If an attempt is made to modify an object where modifications are not allowed.
            </summary>
      <remarks>
            Many DOM methods raise this exception "when the node is readonly".
            </remarks>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomException.Code.NOT_FOUND_ERR">
      <summary>
            If an attempt is made to reference a Node in a context where it does not exist.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomException.Code.NOT_SUPPORTED_ERR">
      <summary>
            If the implementation does not support the requested type of object or operation.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomException.Code.INUSE_ATTRIBUTE_ERR">
      <summary>
            If an attempt is made to add an attribute that is already in use elsewhere.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomException.Code.INVALID_STATE_ERR">
      <summary>
            If an attempt is made to use an object that is not, or is no longer, usable.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomException.Code.SYNTAX_ERR">
      <summary>
            If an invalid or illegal string is specified.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomException.Code.INVALID_MODIFICATION_ERR">
      <summary>
            If an attempt is made to modify the type of the underlying object.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomException.Code.NAMESPACE_ERR">
      <summary>
            If an attempt is made to create or change an object in a way which is incorrect with regard to namespaces.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomException.Code.INVALID_ACCESS_ERR">
      <summary>
            If a parameter or an operation is not supported by the underlying object.
            </summary>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomException.Code.VALIDATION_ERR">
      <summary>
            If a call to a method such as insertBefore or removeChild would make the Node invalid with respect to "partial validity", this exception would be raised and the operation would not be done. This code is used in [DOM Level 3 Validation]. Refer to this specification for further information. 
            </summary>
      <remarks>
            See http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-partially-valid
            and http://www.w3.org/TR/2004/REC-DOM-Level-3-Val-20040127/
            </remarks>
    </member>
    <member name="F:ModelText.ModelDom.Nodes.DomException.Code.TYPE_MISMATCH_ERR">
      <summary>
            If the type of an object is incompatible with the expected type of the parameter associated to the object.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Data.ICssStylesheetData">
      <summary>
            This interface represents a stylesheet,
            after it has been parsed and processed, but before it is used as input to the top-level API.
            </summary>
    </member>
    <member name="M:ModelText.ModelCssInterfaces.Data.ICssStylesheetData.getRulesets(System.Predicate{ModelText.ModelCssInterfaces.Parsed.ICssMedium})">
      <summary>
            Returns a list of of the CSS rulesets, which are defined in the stylesheet and which match the specified media types.
            </summary>
      <param name="isMedium">A predicate which defines what media types are applicable.
            <para>The <c>CssDataFactory.defaultMedium</c> property may be a suitable delegate to pass as this parameter.</para></param>
      <returns>A list of <see cref="T:ModelText.ModelCssInterfaces.Data.ICssRulesetData" /> instances which match the specified media types.</returns>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Parsed.ICssPage">
      <summary>
            This element represents a page statement (an page statement follows a <c>@page</c> token).
            Instances of this interface are returned by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssStylesheet.pages" /> property.
            </summary>
      <remarks>
            The contents of this element correspond to the following lines of the CSS Grammar:
            <code>
            page
              : PAGE_SYM S* IDENT? pseudo_page? S*
                '{' S* declaration [ ';' S* declaration ]* '}' S*
              ;
            </code></remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssPage.layoutName">
      <summary>
            The layout name can be used as shown in the following example, and as described in http://www.tutorialspoint.com/css/css_paged_media.htm
            <example>
            &lt;style type="text/css"&gt;
            &lt;!--
            @page { size : portrait }
            @page rotated { size : landscape }
            table { page : rotated }
            --&gt;
            &lt;/style&gt;
            </example></summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssPage.pseudoPage">
      <summary>
            The pseudo-pages are as stated at http://www.w3.org/TR/CSS21/page.html#page-box
            and include
            :left and :right and maybe either :all or blank.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssPage.declarations">
      <summary>
            The collection of declaration instances associated with this page statement.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Parsed.ICssExpression">
      <summary>
            This element represents an expression.
            Instances of this interface are returned by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssDeclaration.expression" /> property,
            and also by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssExpressionTermFunction.expression" /> property.
            </summary>
      <remarks>
            The contents of this element correspond to the following lines of the CSS Grammar:
            <code>
            expr
              : term [ operator term ]*
              ;
            </code></remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssExpression.term">
      <summary>
            This is the first term of the expression
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssExpression.extraTerms">
      <summary>
            This is a collection of any subsequent terms, combined with 
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Data.ICssSpecificityData">
      <summary>
            An interface which defines the specificity for wich a ruleset matches a given element.
            </summary>
      <remarks>Instances of this interface are returned by the
            <see cref="M:ModelText.ModelCssInterfaces.Data.ICssRulesetData.matchesSelectors(ModelText.ModelCssInterfaces.Dom.IDomElement,ModelText.ModelCssInterfaces.Data.ICssPseudoElementData)" />
            method.
            <para>This interface implements the
            <see cref="T:System.IComparable`1" /> interface,
            so you can compare two <c>ICssSpecificityData</c> instances to see which one is more specific.</para></remarks>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.View.ICssViewCss">
      <summary>
            This interface is modelled on the DOM
            <a href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-ViewCSS" target="_blank">ViewCSS</a>
            interface.
            </summary>
    </member>
    <member name="M:ModelText.ModelCssInterfaces.View.ICssViewCss.getComputedStyle(ModelText.ModelCssInterfaces.Dom.IDomElement,System.String)">
      <summary>
            This method is used to get the computed style as it is defined in CCS2.
            </summary>
      <param name="domElement">The element whose style is to be computed. This parameter cannot be null.</param>
      <param name="pseudoElement">The pseudo-element or null if none.</param>
      <returns>The computed style. The CSSStyleDeclaration is read-only and contains only absolute values.</returns>
    </member>
    <member name="M:ModelText.ModelCssInterfaces.View.ICssViewCss.getSpecifiedStyle(ModelText.ModelCssInterfaces.Dom.IDomElement,ModelText.ModelCssInterfaces.Dom.PseudoElements)">
      <summary>
            This method is of my own invention.
            It's used in the API between the in-browser DOM and the parsed CSS.
            It's better than the official method because it allows more than one ICssPseudo instance
            and a more accurate implementation of partial match based on a function as described at
            http://www.w3.org/TR/CSS21/selector.html#lang
            </summary>
      <param name="domElement" />
      <param name="pseudos" />
      <returns />
    </member>
    <member name="M:ModelText.ModelCssInterfaces.View.ICssViewCss.getSpecifiedAnonymousChildStyle(ModelText.ModelCssInterfaces.Dom.IDomElement,ModelText.ModelCssInterfaces.Dom.PseudoElements)">
      <summary>
            This method is similar to getSpecifiedStyle except
            that it's used to get the style of an anonymous child block
            the rules for which are described at
            http://www.w3.org/TR/CSS2/visuren.html#anonymous-block-level
            </summary>
      <param name="parentDomElement" />
      <param name="pseudos" />
      <returns />
    </member>
    <member name="M:ModelText.ModelCssInterfaces.View.ICssViewCss.resetCache">
      <summary>
            This method is of my own invention.
            It's used in the API between the in-browser DOM and the parsed CSS.
            The results returned by getSpecifiedStyle are based on cached values calculated for
            IDomElement values.
            Some of these IDomElement instance are local to a specific HTML document, e.g.
            the instances which contain id attributes.
            If the same ICssViewCss instance is reused for multiple documents, then the cache
            can fill with entries which don't exist in the current document.
            It's recommended that you call this method in between each document.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.View.ICssStyleDeclaration">
      <summary>
            This interface is based on a subset of the DOM
            <a href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration" target="_blank">CSSStyleDeclaration</a>
            interface.
            </summary>
      <remarks>
            The
            <a href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSS2Properties" target="_blank">CSS2Properties</a>
            documentation says,
            "If an implementation does implement this interface, the expectation is that language-specific methods
            can be used to cast from an instance of the CSSStyleDeclaration interface to the CSS2Properties interface".
            <para>
            The "language-specific method" which I use here is to say that
            <see cref="T:ModelText.ModelCssInterfaces.View.ICssStyleDeclaration" /> inherits from <see cref="T:ModelText.ModelCssInterfaces.View.ICss2Properties" />.
            </para></remarks>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.View.ICss2Properties">
      <summary>
            This interface is based on a subset of the DOM
            <a href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSS2Properties" target="_blank">CSS2Properties</a>
            interface.
            </summary>
      <remarks>
            Instead of returning string values as defined in the standard, I find it more useful to return
            <see cref="T:ModelText.ModelCssInterfaces.Values.ICssValue" /> instances (which because they are parsed values are easier for client software to make use of).
            You can easily convert a <c>ICssValue</c> instance to a string: simply get its <c>cssText</c> property.
            </remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.color">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.backgroundColor">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.paddingTop">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.paddingRight">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.paddingBottom">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.paddingLeft">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.marginTop">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.marginRight">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.marginBottom">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.marginLeft">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.borderCollapse">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.borderSpacing">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.borderTopColor">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.borderBottomColor">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.borderRightColor">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.borderLeftColor">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.borderTopStyle">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.borderBottomStyle">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.borderRightStyle">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.borderLeftStyle">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.borderTopWidth">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.borderBottomWidth">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.borderRightWidth">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.borderLeftWidth">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.fontFamily">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.fontSize">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.fontStyle">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.fontVariant">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.fontWeight">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.lineHeight">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.textDecoration">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.cursor">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.listStyleType">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.width">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.display">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.textAlign">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.verticalAlign">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.View.ICss2Properties.whiteSpace">
      <exclude />
    </member>
    <member name="M:ModelText.ModelCssInterfaces.View.ICssStyleDeclaration.getPropertyCSSValue(System.String)">
      <exclude />
    </member>
    <member name="M:ModelText.ModelCssInterfaces.View.ICssStyleDeclaration.equals(ModelText.ModelCssInterfaces.View.ICssStyleDeclaration)">
      <exclude />
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimpleQualifierPseudo">
      <summary>
            This interface models an instance of a pseudo-element or pseudo-class
            as defined at
            http://www.w3.org/TR/CSS21/selector.html#pseudo-elements
            http://www.w3.org/TR/CSS21/selector.html#pseudo-class-selectors
            http://www.w3.org/TR/CSS21/selector.html#pseudo-element-selectors
            Instances of this interface are returned by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimpleQualifier.pseudo" /> property.
            </summary>
      <remarks>
            The contents of this element correspond to the following lines of the CSS Grammar:
            <code>
            pseudo
              : ':' [ IDENT | FUNCTION S* IDENT? S* ')' ]
              ;
            </code></remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimpleQualifierPseudo.id">
      <summary>
            Most instances will have a non-null id and a null function, for example
            :hover is modeled as id==hover and function==null.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimpleQualifierPseudo.function">
      <summary>
            Some instances will have a non-null function as well as a non-null id, for example
            :lang(fr) is modeled as function=lang and id=fr.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Parsed.ICssImport">
      <summary>
            This element represents an import statement (an import statement follows a <c>@import</c> token).
            Instances of this interface are returned by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssStylesheet.imports" /> property.
            </summary>
      <remarks>
            The contents of this element correspond to the following lines of the CSS Grammar:
            <code>
            import
              : IMPORT_SYM S*
                [STRING|URI] S* [ medium [ ',' S* medium]* ]? ';' S*
              ;
            </code></remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssImport.stringValue">
      <summary>
            If this property returns a value then the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssImport.uriValue" /> property returns <c>null</c>, and vice versa.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssImport.uriValue">
      <summary>
            If this property returns a value then the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssImport.stringValue" /> property returns <c>null</c>, and vice versa.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssImport.media">
      <summary>
            The list of media types to which this import statement is applicable.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Parsed.ICssExpressionTermFunction">
      <summary>
            This element represents a function, which is one of the types of expression term.
            Instances of this interface are returned by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssExpressionTerm.function" /> property.
            </summary>
      <remarks>
            The contents of this element correspond to the following lines of the CSS Grammar:
            <code>
            function
              : FUNCTION S* expr ')' S*
              ;
            </code></remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssExpressionTermFunction.functionName">
      <summary>
            The name of the function.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssExpressionTermFunction.expression">
      <summary>
            The expression that's passed as a parameter to the function.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Parsed.ICssExpressionExtraTerm">
      <summary>
            This element represents an extra term within an expression.
            Instances of this interface are returned by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssExpression.extraTerms" /> property.
            </summary>
      <remarks>
            The contents of this element correspond to just the <c>operator term</c> clause within the following lines of the CSS grammar:
            <code>
            expr
              : term [ operator term ]*
              ;
            </code>
            The contents of the <c>operator</c> element correspond to the following lines of the CSS Grammar:
            <code>
            operator
              : '/' S* | COMMA S* |
              ;
            </code></remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssExpressionExtraTerm.operator">
      <summary>
            This is the unary operator.
            Its possible values are one of <c>','</c>, <c>'/'</c>, or <c>null</c>.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssExpressionExtraTerm.term">
      <summary>
            This is the extra term.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Exceptions.RuleException">
      <summary>
            This exception will be thrown when the parser has a token it cannot parse.
            </summary>
    </member>
    <member name="M:ModelText.ModelCssInterfaces.Exceptions.RuleException.#ctor(System.String)">
      <exclude />
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Inherited.ICssInherit">
      <summary>
            This interface is used by the top-level API, to help implement the conversion from
            <see cref="T:ModelText.ModelCssInterfaces.Inherited.ICssRelativeValue" />
            to
            <see cref="T:ModelText.ModelCssInterfaces.Inherited.ICssAbsoluteValue" />.
            </summary>
      <remarks>
            An instance of this interface is passed as a parameter to the
            <see cref="M:ModelText.ModelCssInterfaces.Inherited.ICssRelativeValue.getAbsolute(System.String,ModelText.ModelCssInterfaces.Inherited.ICssInherit,ModelText.ModelCssInterfaces.Inherited.GetParentValue)" /> method.
            An implementation of this interface is defined by a class embedded in the implementation of the top-level API.
            </remarks>
    </member>
    <member name="M:ModelText.ModelCssInterfaces.Inherited.ICssInherit.getInitialValue(System.String)">
      <summary>
            Gets a
            <see cref="T:ModelText.ModelCssInterfaces.Inherited.ICssAbsoluteValue" /> instance,
            which represents the initial (default) value of the specified property.
            </summary>
      <param name="propertyName">A string which defines the name of the property.</param>
      <returns>A
            <see cref="T:ModelText.ModelCssInterfaces.Inherited.ICssAbsoluteValue" /> instance
            which defines the initial (default) value of the specified property.</returns>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Inherited.ICssInherit.parentValues">
      <summary>
            Gets a
            <see cref="T:ModelText.ModelCssInterfaces.Inherited.ICssInherit" /> instance,
            which represents the CSS property values of the DOM element's parent element.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Inherited.ICssInherit.fontSize">
      <summary>
            Gets a
            <see cref="T:ModelText.ModelCssInterfaces.Inherited.ICssAbsoluteValue" /> instance,
            which represents the initial (default) value of the font size for this element.
            </summary>
      <remarks>This property is needed because many of the CSS relative property values
            are defined as being relative to the font size.</remarks>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Exceptions.Strict">
      <exclude />
    </member>
    <member name="M:ModelText.ModelCssInterfaces.Exceptions.Strict.todo(System.String)">
      <exclude />
    </member>
    <member name="M:ModelText.ModelCssInterfaces.Exceptions.Strict.failure(System.String)">
      <exclude />
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Data.ICssPseudoElementData">
      <summary>
            This represents a set of zero or more pseudoElement strings,
            which are defined in the CSS using <see cref="T:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimpleQualifierPseudo" />
            and which are selected by the application using <see cref="T:ModelText.ModelCssInterfaces.Dom.PseudoElements" />.
            </summary>
      <remarks>
        <para>
            An instance of this interface is:
            <list type="bullet"><item><description>Returned by the <see cref="P:ModelText.ModelCssInterfaces.Data.ICssRulesetData.pseudoElements" /> property</description></item><item><description>Filtered using the <see cref="T:ModelText.ModelCssInterfaces.Dom.PseudoElements" /> instance
            which is passed as a parameter to the 
            <see cref="M:ModelText.ModelCssInterfaces.View.ICssViewCss.getSpecifiedStyle(ModelText.ModelCssInterfaces.Dom.IDomElement,ModelText.ModelCssInterfaces.Dom.PseudoElements)" /> method.</description></item><item><description>Passed as an input parameter to the
            <see cref="M:ModelText.ModelCssInterfaces.Data.ICssRulesetData.matchesSelectors(ModelText.ModelCssInterfaces.Dom.IDomElement,ModelText.ModelCssInterfaces.Data.ICssPseudoElementData)" /> method.</description></item></list></para>
        <para>
            The class which implements this interface overrides the <c>Equals</c> and <c>GetHashCode</c> methods,
            and is immutable:
            so, it can be equated by value, and used as the key of a dictionary.
            </para>
      </remarks>
    </member>
    <member name="M:ModelText.ModelCssInterfaces.Data.ICssPseudoElementData.append(ModelText.ModelCssInterfaces.Data.ICssPseudoElementData)">
      <summary>
            Concatenates the pseudoelements from two <see cref="T:ModelText.ModelCssInterfaces.Data.ICssPseudoElementData" /> instances.
            </summary>
      <remarks>The implementation of the top-level API uses this method to concatenate the
            pseudo-elements from several rulesets.</remarks>
      <param name="rhs">The <see cref="T:ModelText.ModelCssInterfaces.Data.ICssPseudoElementData" /> instance to be added to this one.</param>
      <returns>A new <see cref="T:ModelText.ModelCssInterfaces.Data.ICssPseudoElementData" /> instance which contains the concatenated pseudoelement values.</returns>
    </member>
    <member name="M:ModelText.ModelCssInterfaces.Data.ICssPseudoElementData.select(ModelText.ModelCssInterfaces.Dom.PseudoElements)">
      <summary>
            Selects the pseudoelements which match the specified predicate.
            </summary>
      <param name="predicate">A <see cref="T:ModelText.ModelCssInterfaces.Dom.PseudoElements" /> predicate.</param>
      <returns>A new <see cref="T:ModelText.ModelCssInterfaces.Data.ICssPseudoElementData" /> instance which contains the selected pseudoelement values.</returns>
    </member>
    <member name="M:ModelText.ModelCssInterfaces.Data.ICssPseudoElementData.contains(System.String)">
      <summary>
            Tests whether a given pseudoelement is contained within this set.
            </summary>
      <param name="pseudoElement">A string whose value is the pseudoelement to be tested.</param>
      <returns>A boolean which specifies whether the pseudoelement is contained.</returns>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Data.ICssDeclarationsData">
      <summary>
            This interface represents a list of declarations in a stylesheet,
            after they have been parsed and processed, but before they are used as input to the top-level API.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Data.ICssDeclarationsData.enumerated">
      <summary>
            Gets a list of <see cref="T:ModelText.ModelCssInterfaces.Data.ICssDeclarationData" /> instances, which represent the declarations.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Dom.IDomElement">
      <summary>
            This represents an element in the DOM tree, to which a style can be applied.
            </summary>
    </member>
    <member name="M:ModelText.ModelCssInterfaces.Dom.IDomElement.getAttribute(System.String)">
      <summary>
            Retrieves an attribute value by name
            </summary>
      <param name="name">The name of the attribute to retrieve.</param>
      <returns>The Attr value as a string.
            <note type="caution">The W3C documentation says that this method returns
            "the empty string if that attribute does not have a specified or default value".
            However, the current implementation of this method return <c>null</c>.
            In the future, the implementation may change to match the W3C's specification.
            If you want to test for a non-existent attribute value, you should therefore use
            the <see cref="M:System.String.IsNullOrEmpty(System.String)" /> method on the
            string value returned by this method.
            </note></returns>
    </member>
    <member name="M:ModelText.ModelCssInterfaces.Dom.IDomElement.toString">
      <summary>
            The tagName of the element, and all its attributes.
            </summary>
      <remarks>The exact format of this string doesn't matter, provided that
            similar elements return similar strings and disimilar elements return disimilar strings.
            This string is used as a key into a dictionary of cached styles, to return the
            identical style instances for all sufficiently-similar elements.
            </remarks>
      <example>An example of the string returned by this method is
            <c>&lt;p class="example" style="display: none"&gt;</c>.</example>
      <returns>A string which includes the tagName of the element, and all its attributes.</returns>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Dom.IDomElement.tagName">
      <summary>
            The name of the element.
            Note that this is case-preserving in XML.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Dom.IDomElement.parent">
      <summary>
            The parent element of this element.
            </summary>
      <remarks>If this element is the root element of the DOM,
            then this property returns null (because this element has no parent).</remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Dom.IDomElement.previousSibling">
      <summary>
            The previous sibling element of this element.
            </summary>
      <remarks>If this element is the first child element of its parent,
            then this property returns null (because this element has no previous sibling).</remarks>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType">
      <summary>
            This defines the dimension type of a <see cref="T:ModelText.ModelCssInterfaces.Values.ICssPrimitiveValue" /> instance
            as described in the DOM
            <a href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSPrimitiveValue" target="_blank">CSSPrimitiveValue</a>
            documentation.
            </summary>
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Unknown">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Number">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Percentage">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Ems">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Exs">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Px">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Cm">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Mm">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.In">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Pt">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Pc">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Deg">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Rad">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Grad">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Ms">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.S">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Hz">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Khz">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Dimension">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.String">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Uri">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Ident">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Attr">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Counter">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.Rect">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType.RgbColor">
      <exclude />
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimple">
      <summary>
            This element represents a simple selector.
            Instances of this interface are returned by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssSelector.simpleSelector" /> property,
            and by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorExtra.simpleSelector" /> property.
            </summary>
      <remarks>
            The contents of this element correspond to the following lines of the CSS Grammar:
            <code>
            simple_selector
              : element_name [ HASH | class | attrib | pseudo ]*
              | [ HASH | class | attrib | pseudo ]+
              ;
            </code></remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimple.elementNameIdentifier">
      <summary>
            This represents the element name, if the element name is an identifier.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimple.elementNameAsterisk">
      <summary>
            This returns true if the element name is an asterisk <c>'*'</c>.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimple.qualifiers">
      <summary>
            This represents the collection of extra qualifiers.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Parsed.ICssDeclaration">
      <summary>
            This element represents a declaration.
            Instances of this interface are returned by the
            <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssRuleset.declarations" /> property and/or by the
            <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssPage.declarations" /> property.
            </summary>
      <remarks>
            The contents of this element correspond to the following lines of the CSS Grammar:
            <code>
            declaration
              : property ':' S* expr prio?
              ;
            </code></remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssDeclaration.property">
      <summary>
            The name of the property, whose value is defined by the associated expression.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssDeclaration.expression">
      <summary>
            The expression which defines the value of the property.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssDeclaration.important">
      <summary>
            Whether or not the <c>!important</c> token is specified in this declaration.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Exceptions.SymbolException">
      <summary>
            This exception will be thrown when the tokenizer cannot recognize the input.
            </summary>
    </member>
    <member name="M:ModelText.ModelCssInterfaces.Exceptions.SymbolException.#ctor(System.String)">
      <exclude />
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimpleQualifierAttrib">
      <summary>
            This element represents an attrib within the qualifier of a simple selector.
            Instances of this interface are returned by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimpleQualifier.attrib" /> property.
            </summary>
      <remarks>
            The contents of this element correspond to the following lines of the CSS Grammar:
            <code>
            attrib
              : '[' S* IDENT S* [ [ '=' | INCLUDES | DASHMATCH ] S* [ IDENT | STRING ] S* ]? ']'
              ;
            </code></remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimpleQualifierAttrib.ident">
      <summary>
            This is the ident value.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimpleQualifierAttrib.equals">
      <summary>
            This returns true if <c>'='</c> was specified after the ident.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimpleQualifierAttrib.includes">
      <summary>
            This returns true if <c>'~='</c> was specified after the ident. 
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimpleQualifierAttrib.dashmatch">
      <summary>
            This returns true if <c>'|='</c> was specified after the ident. 
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimpleQualifierAttrib.matchIdent">
      <summary>
            This is the value of the last ident.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimpleQualifierAttrib.matchString">
      <summary>
            This is the value of the last string.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimpleQualifier">
      <summary>
            This element represents a qualifier, after the element name, within a simple selector.
            Instances of this interface are returned by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimple.qualifiers" /> property.
            </summary>
      <remarks>
            The contents of this element correspond to just the <c>[ HASH | class | attrib | pseudo ]</c> clause within the following lines of the CSS grammar:
            <code>
            simple_selector
              : element_name [ HASH | class | attrib | pseudo ]*
              | [ HASH | class | attrib | pseudo ]+
              ;
            </code></remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimpleQualifier.class">
      <summary>
            This is the class.
            </summary>
      <remarks>
            The contents of this element correspond to the following lines of the CSS Grammar:
            <code>
            class
              : '.' IDENT
              ;
            </code></remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimpleQualifier.id">
      <summary>
            This is the ID.
            </summary>
      <remarks>
            The contents of this element correspond to the following line of the CSS Grammar:
            <code>
            "#"{name}		{return HASH;}
            </code></remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimpleQualifier.attrib">
      <summary>
            This is the attrib.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorSimpleQualifier.pseudo">
      <summary>
            This is the pseudo.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Values.ICssValue">
      <summary>
            This interface is the base-class for a CSS value instance as defined at
            http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSValue
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Values.ICssValue.cssText">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Values.ICssValue.cssValueType">
      <exclude />
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Values.ICssRect">
      <summary>
            This interface is as described in the DOM
            <a href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-Rect" target="_blank">Rect</a>
            documentation.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Values.ICssRect.top">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Values.ICssRect.right">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Values.ICssRect.bottom">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Values.ICssRect.left">
      <exclude />
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Values.ICssPrimitiveValue">
      <summary>
            This interface is as described in the DOM
            <a href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSPrimitiveValue" target="_blank">CSSPrimitiveValue</a>
            documentation.
            </summary>
    </member>
    <member name="M:ModelText.ModelCssInterfaces.Values.ICssPrimitiveValue.getFloatValue(ModelText.ModelCssInterfaces.Values.CssPrimitiveValueType)">
      <exclude />
    </member>
    <member name="M:ModelText.ModelCssInterfaces.Values.ICssPrimitiveValue.getStringValue">
      <exclude />
    </member>
    <member name="M:ModelText.ModelCssInterfaces.Values.ICssPrimitiveValue.getRGBColorValue">
      <exclude />
    </member>
    <member name="M:ModelText.ModelCssInterfaces.Values.ICssPrimitiveValue.getRectValue">
      <exclude />
    </member>
    <member name="M:ModelText.ModelCssInterfaces.Values.ICssPrimitiveValue.getCounterValue">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Values.ICssPrimitiveValue.primitiveType">
      <exclude />
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Inherited.GetParentValue">
      <summary>
            This delegate is used by the top-level API, to help implement the conversion from
            <see cref="T:ModelText.ModelCssInterfaces.Inherited.ICssRelativeValue" />
            to
            <see cref="T:ModelText.ModelCssInterfaces.Inherited.ICssAbsoluteValue" />.
            </summary>
      <remarks>
            An instance of this delegate is passed as a parameter to the
            <see cref="M:ModelText.ModelCssInterfaces.Inherited.ICssRelativeValue.getAbsolute(System.String,ModelText.ModelCssInterfaces.Inherited.ICssInherit,ModelText.ModelCssInterfaces.Inherited.GetParentValue)" /> method.
            An implementation of this delegate is defined by a class embedded in the implementation of the top-level API.
            </remarks>
      <param name="propertyName">A string which defines the name of the CSS property.</param>
      <returns>A <see cref="T:ModelText.ModelCssInterfaces.Inherited.ICssAbsoluteValue" /> instance which represents the absolute value of the property of the parent element.</returns>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Values.CssValueType">
      <summary>
            This defines the unit type of a <see cref="T:ModelText.ModelCssInterfaces.Values.ICssValue" /> instance
            as described in the DOM
            <a href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSValue" target="_blank">CSSValue</a>
            documentation.
            </summary>
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssValueType.Inherit">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssValueType.PrimitiveValue">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssValueType.ValueList">
      <exclude />
    </member>
    <member name="F:ModelText.ModelCssInterfaces.Values.CssValueType.Custom">
      <exclude />
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Parsed.ICssMedia">
      <summary>
            This element represents a media statement (an media statement follows a <c>@media</c> token).
            Instances of this interface are returned by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssStylesheet.medias" /> property.
            </summary>
      <remarks>
            The contents of this element correspond to the following lines of the CSS Grammar:
            <code>
            media
              : MEDIA_SYM S* medium [ ',' S* medium ]* '{' S* ruleset* '}' S*
              ;
            </code></remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssMedia.mediums">
      <summary>
            The collection of media types to which the rulesets are applicable.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssMedia.rulesets">
      <summary>
            The collection of rulesets associated with the media.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Exceptions.StrictException">
      <summary>
            This exception will be thrown when even a recoverable error condition is detected,
            if the <see cref="M:ModelText.ModelCssInterfaces.Exceptions.StrictException.enable(System.Boolean)" /> method has been invoked.
            </summary>
    </member>
    <member name="M:ModelText.ModelCssInterfaces.Exceptions.StrictException.enable(System.Boolean)">
      <summary>
            The CSS component may silently ignore some errors or unexpected conditions which it detects
            when it parses a stylesheet.
            You can use this method to set it to throw an exception instead of silently ignoring the message.
            </summary>
      <param name="bEnable">Set this to <c>true</c> if you want to enable throwing
            a <c>StrictException</c> on various unexpected conditions, instead of sliently ignoring them.</param>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Parsed.ICssSelectorExtra">
      <summary>
            This element represents an extra simple selector within a selector.
            Instances of this interface are returned by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssSelector.extraSelectors" /> property.
            </summary>
      <remarks>
            The contents of this element correspond to just the <c>combinator simple_selector</c> clause within the following lines of the CSS grammar:
            <code>
            selector
              : simple_selector [ combinator simple_selector ]*
              ;
            </code>
            The contents of the <c>combinator</c> element correspond to the following lines of the CSS Grammar:
            <code>
            combinator
              : PLUS S*
              | GREATER S*
              | S
              ;
            </code></remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorExtra.combinator">
      <summary>
            This is the unary operator.
            Its possible values are one of <c>'+'</c>, <c>'&gt;'</c>, or <c>null</c>.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssSelectorExtra.simpleSelector">
      <summary>
            This is the extra simple selector.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Parsed.ICssRuleset">
      <summary>
            This element represents a ruleset.
            Instances of this interface are returned by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssStylesheet.rulesets" /> property,
            and by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssMedia.rulesets" /> property.
            </summary>
      <remarks>
            The contents of this element correspond to the following lines of the CSS Grammar:
            <code>
            ruleset
              : selector [ ',' S* selector ]*
                '{' S* declaration? [ ';' S* declaration? ]* '}' S*
              ;  
            </code></remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssRuleset.selectors">
      <summary>
            The CSS selectors, which select DOM elements to which the style declarations in this ruleset should be applied.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssRuleset.declarations">
      <summary>
            The style declarations defined in this ruleset.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Inherited.ICssAbsoluteValue">
      <summary>
            This interface represents the absolute (not relative) property values
            which are returned by the top-level API.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Inherited.ICssRelativeValue">
      <summary>
            This interface represents the relative (not absolute) property values
            which are returned by the mid-level API.
            </summary>
    </member>
    <member name="M:ModelText.ModelCssInterfaces.Inherited.ICssRelativeValue.getAbsolute(System.String,ModelText.ModelCssInterfaces.Inherited.ICssInherit,ModelText.ModelCssInterfaces.Inherited.GetParentValue)">
      <summary>
            This method is invoked from the implementation of the top-level API,
            to get a <see cref="T:ModelText.ModelCssInterfaces.Inherited.ICssAbsoluteValue" /> instance from this <see cref="T:ModelText.ModelCssInterfaces.Inherited.ICssRelativeValue" />.
            </summary>
      <param name="propertyName">A string which represents the name of the property.</param>
      <param name="inherit">A <see cref="T:ModelText.ModelCssInterfaces.Inherited.ICssInherit" /> instance.</param>
      <param name="getParentValue">A <see cref="T:ModelText.ModelCssInterfaces.Inherited.GetParentValue" /> instance.</param>
      <returns />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Inherited.ICssRelativeValue.relativeValue">
      <summary>
            Gets the <see cref="T:ModelText.ModelCssInterfaces.Values.ICssPrimitiveValue" /> if the value is a single value.
            </summary>
      <remarks>
            If the value is a list instead of a single value, then this property returns <c>null</c>
            and the <see cref="P:ModelText.ModelCssInterfaces.Inherited.ICssRelativeValue.relativeValueList" /> property returns a value instead.
            </remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Inherited.ICssRelativeValue.relativeValueList">
      <summary>
            Gets the <see cref="T:ModelText.ModelCssInterfaces.Values.ICssPrimitiveValueList" /> if the value is a list of values.
            </summary>
      <remarks>
            If the value is a single value instead of a list, then this property returns <c>null</c>
            and the <see cref="P:ModelText.ModelCssInterfaces.Inherited.ICssRelativeValue.relativeValue" /> property returns a value instead.
            </remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Inherited.ICssAbsoluteValue.absoluteValue">
      <summary>
            Gets the <see cref="T:ModelText.ModelCssInterfaces.Values.ICssPrimitiveValue" /> if the value is a single value.
            </summary>
      <remarks>
            If the value is a list instead of a single value, then this property returns <c>null</c>
            and the <see cref="P:ModelText.ModelCssInterfaces.Inherited.ICssAbsoluteValue.absoluteValueList" /> property returns a value instead.
            </remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Inherited.ICssAbsoluteValue.absoluteValueList">
      <summary>
            Gets the <see cref="T:ModelText.ModelCssInterfaces.Values.ICssPrimitiveValueList" /> if the value is a list of values.
            </summary>
      <remarks>
            If the value is a single value instead of a list, then this property returns <c>null</c>
            and the <see cref="P:ModelText.ModelCssInterfaces.Inherited.ICssAbsoluteValue.absoluteValue" /> property returns a value instead.
            </remarks>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Values.ICssCounter">
      <summary>
            This interface is as described in the DOM
            <a href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-Counter" target="_blank">Counter</a>
            documentation.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Values.ICssCounter.identifier">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Values.ICssCounter.listStyle">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Values.ICssCounter.separator">
      <exclude />
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Parsed.ICssStylesheet">
      <summary>
            The top-level element, which represents the whole stylesheet.
            An instance of this interface is returned by the <c>parseStylesheet</c> method of the
            <c>ModelText.ModelCssParser.CssParserFactory</c> class.
            </summary>
      <remarks>
            The contents of this element correspond to the following lines of the CSS Grammar:
            <code>
            stylesheet
              : [ CHARSET_SYM STRING ';' ]?
                [S|CDO|CDC]* [ import [S|CDO|CDC]* ]*
                [ [ ruleset | media | page ] [S|CDO|CDC]* ]*
              ;
            </code></remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssStylesheet.charset">
      <summary>
            The charset string which follows a <c>@charset</c> token.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssStylesheet.imports">
      <summary>
            A collection of import statements (an import statement follows a <c>@import</c> token).
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssStylesheet.objects">
      <summary>
            A collection of ruleset, media, and page statements.
            The objects in this collection are of type <see cref="T:ModelText.ModelCssInterfaces.Parsed.ICssRuleset" />, <see cref="T:ModelText.ModelCssInterfaces.Parsed.ICssMedia" />, and/or <see cref="T:ModelText.ModelCssInterfaces.Parsed.ICssPage" />,
            presented in the sequence in which they were defined in the stylesheet.
            </summary>
      <remarks>See also the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssStylesheet.rulesets" />, <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssStylesheet.medias" />, and <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssStylesheet.pages" /> properties,
            which return the objects of a particular types.</remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssStylesheet.rulesets">
      <summary>
            A collection of the ruleset statements in the stylesheet.
            </summary>
      <remarks>
            In addition to the ruleset instances returned by this property,
            there may also be other ruleset instances, embedded in media and page statements returned by the
            <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssStylesheet.medias" /> and <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssStylesheet.pages" /> properties.
            </remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssStylesheet.medias">
      <summary>
            A collection of the media statements in the stylesheet.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssStylesheet.pages">
      <summary>
            A collection of the page statements in the stylesheet.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Parsed.ICssExpressionTerm">
      <summary>
            This element represents a term within an expression.
            Instances of this interface are returned by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssExpression.term" /> property,
            and by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssExpressionExtraTerm.term" /> property.
            </summary>
      <remarks>
            The contents of this element correspond to the following lines of the CSS Grammar:
            <code>
            term
              : unary_operator?
                [ NUMBER S* | PERCENTAGE S* | LENGTH S* | EMS S* | EXS S* | ANGLE S* |
                  TIME S* | FREQ S* ]
              | STRING S* | IDENT S* | URI S* | hexcolor | function
              ;
            </code></remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssExpressionTerm.unaryOperator">
      <summary>
            This is the unary operator.
            Its possible values are one of <c>'+'</c>, <c>'-'</c>, or <c>null</c>.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssExpressionTerm.number">
      <summary>
            This is a number.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssExpressionTerm.percentage">
      <summary>
            This is a percentage.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssExpressionTerm.dimension">
      <summary>
            This is a dimension (for example, a length or an angle).
            The string consists of two parts: numeric digits, followed by the type of dimension (for example "em").
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssExpressionTerm.stringValue">
      <summary>
            This is a string value.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssExpressionTerm.identifier">
      <summary>
            This is an identifier.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssExpressionTerm.uri">
      <summary>
            This is a URI.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssExpressionTerm.hexColor">
      <summary>
            This is a hex color.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssExpressionTerm.function">
      <summary>
            This is a function.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Dom.PseudoElements">
      <summary>
            This interface models one or more instances of a pseudo-element or pseudo-class
            as defined at
            <a href="http://www.w3.org/TR/CSS21/selector.html#pseudo-elements" target="_blank">Pseudo-elements and pseudo-classes</a>.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Values.ICssRgbColor">
      <summary>
            This interface is as described in the DOM
            <a href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-RGBColor" target="_blank">RGBColor</a>
            documentation.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Values.ICssRgbColor.red">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Values.ICssRgbColor.green">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Values.ICssRgbColor.blue">
      <exclude />
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Parsed.NamespaceDoc">
      <summary>
            This namespace includes interfaces which represent the stylesheet,
            after the stylesheet has been parsed but before any further calculation.
            </summary>
      <remarks>
        <para>This is the lowest-level API.</para>
        <para>
            See
            <a href="../Index.html">APIs for the CSS Component</a>
            for an introduction to these topics.
            </para>
      </remarks>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Data.NamespaceDoc">
      <summary>
            This namespace includes interfaces which represent the stylesheet,
            after the stylesheet has been parsed, and also after various further calculations.
            </summary>
      <remarks>
        <para>This is the mid-level API.</para>
        <para>
            See
            <a href="../Index.html">APIs for the CSS Component</a>
            for an introduction to these topics.
            </para>
      </remarks>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Values.NamespaceDoc">
      <summary>
            This namespace includes interfaces which represent the values within CSS expressions:
            these include identifiers like "medium" or "white", dimensions like "2px"or "3em",
            and colors like "#FFF".
            </summary>
      <remarks>
        <para>These interfaces are returned both by the mid-level and by the top-level APIs.</para>
        <para>
            See
            <a href="../Index.html">APIs for the CSS Component</a>
            for an introduction to these topics.
            </para>
      </remarks>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Dom.NamespaceDoc">
      <summary>
            This namespace includes interfaces which represent the HTML elements within a DOM.
            </summary>
      <remarks>
        <para>Instances of these interfaces are passed as input parameters to methods of the top-level APIs.</para>
        <para>
            See
            <a href="../Index.html">APIs for the CSS Component</a>
            for an introduction to these topics.
            </para>
      </remarks>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Exceptions.NamespaceDoc">
      <summary>
            This namespace includes classes which define types of <see cref="T:System.ApplicationException" />,
            which are thrown if the CSS component detects various types of error condition.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Inherited.NamespaceDoc">
      <summary>
            This namespace includes interfaces which distinguish between "inherited" and "absolute" CSS property values.
            </summary>
      <remarks>
        <para>These interfaces are returned both by the mid-level and by the top-level APIs.</para>
        <para>
            See
            <a href="../Index.html">APIs for the CSS Component</a>
            for an introduction to these topics.
            </para>
      </remarks>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.View.NamespaceDoc">
      <summary>
            This namespace includes interfaces which return the calculated CSS properties for each HTML element in the DOM.
            </summary>
      <remarks>
        <para>This is the top-level API.</para>
        <para>
            See
            <a href="../Index.html">APIs for the CSS Component</a>
            for an introduction to these topics.
            </para>
      </remarks>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Exceptions.InvalidAccessException">
      <summary>
            This type of exception is thrown if you use
            a method of <see cref="T:ModelText.ModelCssInterfaces.Values.ICssPrimitiveValue" /> that's not compatible
            with its <c>primitiveType</c>,
            for example if you invoke the <c>getRGBColorValue</c> method
            when the <c>primitiveType</c> property value is not <c>CssPrimitiveValueType.RgbColor</c>.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Data.ICssDeclarationData">
      <summary>
            This interface represents a declaration,
            after it has been parsed and processed, but before it is used as input to the top-level API.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Data.ICssDeclarationData.important">
      <summary>
            Whether or not the <c>!important</c> token is specified in this declaration.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Data.ICssDeclarationData.property">
      <summary>
            The name of the property, whose value is defined by the associated expression.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Data.ICssDeclarationData.expression">
      <summary>
            A <see cref="T:ModelText.ModelCssInterfaces.Inherited.ICssRelativeValue" /> expression which defines the value of the property.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Parsed.ICssSelector">
      <summary>
            This element represents a selector.
            Instances of this interface are returned by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssRuleset.selectors" /> property.
            </summary>
      <remarks>
            The contents of this element correspond to the following lines of the CSS Grammar:
            <code>
            selector
              : simple_selector [ combinator simple_selector ]*
              ;
            </code></remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssSelector.simpleSelector">
      <summary>
            This represents a simple selector
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssSelector.extraSelectors">
      <summary>
            This represents a collection of extra selectors, with combinators.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Parsed.ICssMedium">
      <summary>
            This represents a string which identifies a medium.
            Instances of this interface are returned by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssMedia.mediums" /> property,
            and by the <see cref="P:ModelText.ModelCssInterfaces.Parsed.ICssImport.media" /> property.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Parsed.ICssMedium.mediaType">
      <summary>
            Recognized media types are given at
            http://www.w3.org/TR/CSS21/media.html#media-types
            which includes:
            all,
            braille,
            embossed,
            handheld,
            print,
            projection,
            screen,
            speech,
            tty,
            tv
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Values.ICssValueList">
      <summary>
            This interface is as described in the DOM
            <a href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSValueList" target="_blank">CSSValueList</a>
            documentation.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Values.ICssValueList.length">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Values.ICssValueList.Item(System.Int32)">
      <exclude />
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Values.ICssPrimitiveValueList">
      <summary>
            This interface adds <c>IEnumerable&lt;ICssPrimitiveValue&gt;</c> functionality
            to the <see cref="T:ModelText.ModelCssInterfaces.Values.ICssValueList" /> interface.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssInterfaces.Data.ICssRulesetData">
      <summary>
            This interface represents a ruleset,
            after it has been parsed and processed, but before it is used as input to the top-level API.
            </summary>
    </member>
    <member name="M:ModelText.ModelCssInterfaces.Data.ICssRulesetData.matchesSelectors(ModelText.ModelCssInterfaces.Dom.IDomElement,ModelText.ModelCssInterfaces.Data.ICssPseudoElementData)">
      <summary>
            This method specifies whether the selectors for this ruleset match the specified
            <see cref="T:ModelText.ModelCssInterfaces.Dom.IDomElement" /> and <see cref="T:ModelText.ModelCssInterfaces.Data.ICssPseudoElementData" /> instances.
            </summary>
      <param name="domElement">A <see cref="T:ModelText.ModelCssInterfaces.Dom.IDomElement" /> instance, which represents an HTML element in a DOM.</param>
      <param name="pseudoElements">A <see cref="T:ModelText.ModelCssInterfaces.Data.ICssPseudoElementData" /> instance, which represents
            pseudoelements which may be defined by the selectors and which are acceptable to the caller.</param>
      <returns>A <see cref="T:ModelText.ModelCssInterfaces.Data.ICssSpecificityData" /> instance which specifies how well the selectors match the element.
            If the selectors do not match the element, then this method returns <c>null</c>.</returns>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Data.ICssRulesetData.siblingElementsAreSignificant">
      <summary>
            Gets whether the selectors for this ruleset depend on the siblings of a <see cref="T:ModelText.ModelCssInterfaces.Dom.IDomElement" />.
            </summary>
      <remarks>Using this property lets the top-level API use a performance optimization,
            if the selector matching doesn't depend on sibling elements (which is the usual case).</remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Data.ICssRulesetData.pseudoElements">
      <summary>
            A collection of all the pseudo-elements mentioned in all the selectors of the ruleset.
            </summary>
      <remarks>This property returns <c>null</c> if no pseudo-elements are mentioned in any selector.</remarks>
    </member>
    <member name="P:ModelText.ModelCssInterfaces.Data.ICssRulesetData.declarations">
      <summary>
            Gets the <see cref="T:ModelText.ModelCssInterfaces.Data.ICssDeclarationsData" /> which represents the declarations associated with this ruleset.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssView.TestCssParserFactory">
      <exclude />
    </member>
    <member name="M:ModelText.ModelCssView.TestCssParserFactory.parseAndDisplaySylesheet(System.String)">
      <exclude />
    </member>
    <member name="M:ModelText.ModelCssView.TestCssParserFactory.parseAndDisplayDeclarations(System.String)">
      <exclude />
    </member>
    <member name="T:ModelText.ModelCssView.Origin">
      <summary>
            This identifies the origin of the stylesheet,
            as described in
            <a href="http://www.w3.org/TR/CSS2/cascade.html#cascade" target="_blank">The Cascade</a>.
            </summary>
    </member>
    <member name="F:ModelText.ModelCssView.Origin.UserAgent">
      <summary>
            Conforming user agents must apply a default style sheet (or behave as if they did).
            A user agent's default style sheet should present the elements of the document language
            in ways that satisfy general presentation expectations for the document language
            (e.g., for visual browsers, the EM element in HTML is presented using an italic font).
            See A sample style sheet for HTML for a recommended default style sheet for HTML documents. 
            </summary>
    </member>
    <member name="F:ModelText.ModelCssView.Origin.User">
      <summary>
            The user may be able to specify style information for a particular document.
            For example, the user may specify a file that contains a style sheet
            or the user agent may provide an interface that generates a user style sheet (or behaves as if it did).
            </summary>
    </member>
    <member name="F:ModelText.ModelCssView.Origin.Author">
      <summary>
            The author specifies style sheets for a source document according to the conventions of the document language.
            For instance, in HTML, style sheets may be included in the document or linked externally.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssView.NamespaceDoc">
      <summary>
            This namespace includes the static factory class for
            interfaces in the
            <see cref="N:ModelText.ModelCssInterfaces.View" /> namespace.
            </summary>
      <remarks>
        <para>This is the top-level API.</para>
        <para>
            See
            <a href="../Index.html">APIs for the CSS Component</a>
            for an introduction to these topics.
            </para>
      </remarks>
    </member>
    <member name="T:ModelText.ModelCssView.Stylesheets">
      <summary>
            The set of CSS contents to be parsed.
            An instance of this class is created and initialized by the user application,
            then passed as a parameter to the <see cref="M:ModelText.ModelCssView.CssFactory.parse(ModelText.ModelCssView.Stylesheets)" /> method.
            </summary>
    </member>
    <member name="M:ModelText.ModelCssView.Stylesheets.add(System.String,System.String,ModelText.ModelCssView.Origin)">
      <summary>
            Add a stylesheet to the collection of stylesheets to be parsed.
            These sequence in which you add stylesheets is significant
            (because later properties override any earlier properties with the
            same origin and specificity).
            </summary>
      <param name="cssFileContents">The contents of the stylsheet, using the syntax for a CSS ruleset.</param>
      <param name="mediaType">The media type associated with the ruleset,
            or <code>null</code> if no media type is specified.</param>
      <param name="origin">The <see cref="T:ModelText.ModelCssView.Origin" /> of the ruleset.</param>
    </member>
    <member name="M:ModelText.ModelCssView.Stylesheets.add(System.String,ModelText.ModelCssView.Origin)">
      <summary>
            Similar to the overloaded
            <see cref="M:ModelText.ModelCssView.Stylesheets.add(System.String,System.String,ModelText.ModelCssView.Origin)" />
            method except that that a default media type of <code>null</code> is assumed.
            </summary>
      <param name="cssFileContents">The contents of the stylsheet, using the syntax for a CSS ruleset.</param>
      <param name="origin">The <see cref="T:ModelText.ModelCssView.Origin" /> of the ruleset.</param>
    </member>
    <member name="M:ModelText.ModelCssView.Stylesheets.add(System.String,System.String)">
      <summary>
            Similar to the overloaded
            <see cref="M:ModelText.ModelCssView.Stylesheets.add(System.String,System.String,ModelText.ModelCssView.Origin)" />
            method except that that a default origin of <code>Origin.Author</code> is assumed.
            </summary>
      <param name="cssFileContents">The contents of the stylsheet, using the syntax for a CSS ruleset.</param>
      <param name="mediaType">The media type associated with the ruleset,
            or <code>null</code> if no media type is specified.</param>
    </member>
    <member name="M:ModelText.ModelCssView.Stylesheets.add(System.String)">
      <summary>
            Similar to the overloaded
            <see cref="M:ModelText.ModelCssView.Stylesheets.add(System.String,System.String,ModelText.ModelCssView.Origin)" />
            method except that that a
            default media type of <code>null</code> and a
            default origin of <code>Origin.Author</code> is assumed.
            </summary>
      <param name="cssFileContents">The contents of the stylsheet, using the syntax for a CSS ruleset.</param>
    </member>
    <member name="P:ModelText.ModelCssView.Stylesheets.alsoUseDefaultCss">
      <summary>
            Whether to also include the
            <a href="http://www.w3.org/TR/CSS2/sample.html" target="_blank">Default style sheet</a>.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssView.CssFactory">
      <summary>
            Defines static factory methods, which take unparsed CSS text as an input parameter,
            and return instances of the interfaces in the
            <see cref="N:ModelText.ModelCssInterfaces.View" />
            namespace.
            </summary>
    </member>
    <member name="M:ModelText.ModelCssView.CssFactory.parse(System.String,System.Boolean,ModelText.ModelCssView.CssFactory.StyleElement[])">
      <summary>
            Parses a stylesheet, applies mid-level and top-level calculations, and returns
            a <see cref="T:ModelText.ModelCssInterfaces.View.ICssViewCss" /> instance, from which you can read the absolute values of
            all CSS properties for any DOM element instance.
            </summary>
      <param name="cssFileContents">The contents of a user-defined CSS stylesheet.</param>
      <param name="alsoUseDefaultCss">Whether to also include the
            <a href="http://www.w3.org/TR/CSS2/sample.html" target="_blank">Default style sheet</a>.
            </param>
      <param name="styleElements">
            An optional array of <see cref="T:ModelText.ModelCssView.CssFactory.StyleElement" /> instances,
            which contains CSS defined in a document's &lt;style&gt; elements.
            </param>
      <returns>
            A <see cref="T:ModelText.ModelCssInterfaces.View.ICssViewCss" /> instance, from which you can read the absolute values of
            all CSS properties for any DOM element instance.
            </returns>
    </member>
    <member name="M:ModelText.ModelCssView.CssFactory.parse(ModelText.ModelCssView.Stylesheets)">
      <summary>
            Parses a collection of stylesheets, applies mid-level and top-level calculations, and returns
            a <see cref="T:ModelText.ModelCssInterfaces.View.ICssViewCss" /> instance, from which you can read the absolute values of
            all CSS properties for any DOM element instance.
            </summary>
      <param name="stylesheets">A <see cref="T:ModelText.ModelCssView.Stylesheets" /> instance which
            defines the collection of stylesheets to be parsed.</param>
      <returns>A <see cref="T:ModelText.ModelCssInterfaces.View.ICssViewCss" /> instance, from which you can read the absolute values of
            all CSS properties for any DOM element instance.</returns>
    </member>
    <member name="T:ModelText.ModelCssView.CssFactory.StyleElement">
      <summary>
            The contents of a &lt;style&gt; element which can be specified in the header of an HTML document.
            </summary>
    </member>
    <member name="M:ModelText.ModelCssView.CssFactory.StyleElement.#ctor(System.String,System.String)">
      <summary>
            The constructor
            </summary>
      <param name="mediaDescriptor">The vaue of the element's <c>media=</c> attribute.</param>
      <param name="cssContent">The vaue of the CSS-format text contained between the
            &lt;style&gt; and &lt;/style&gt; tags.</param>
    </member>
    <member name="M:ModelText.ModelCssView.CssFactory.StyleElement.equals(ModelText.ModelCssView.CssFactory.StyleElement)">
      <exclude />
    </member>
    <member name="P:ModelText.ModelCssView.CssFactory.StyleElement.mediaDescriptor">
      <summary>
            The vaue of the element's <c>media=</c> attribute.
            </summary>
    </member>
    <member name="P:ModelText.ModelCssView.CssFactory.StyleElement.cssContent">
      <summary>
            The vaue of the CSS-format text contained between the
            &lt;style&gt; and &lt;/style&gt; tags.
            </summary>
    </member>
    <member name="T:ModelText.ModelCssView.TestCssDataFactory">
      <exclude />
    </member>
    <member name="M:ModelText.ModelCssView.TestCssDataFactory.parseAndDisplaySylesheet(System.String)">
      <exclude />
    </member>
    <member name="M:ModelText.ModelCssView.TestCssDataFactory.parseStylesheet(System.String)">
      <exclude />
    </member>
    <member name="M:ModelText.ModelCssView.TestCssDataFactory.parseAndDisplayDeclarations(System.String)">
      <exclude />
    </member>
    <member name="M:ModelText.ModelCssView.TestCssDataFactory.defaultMedium(ModelText.ModelCssInterfaces.Parsed.ICssMedium)">
      <exclude />
    </member>
    <member name="T:ModelText.ModelEditToolCommands.States.TableSize">
      <exclude />
    </member>
    <member name="M:ModelText.ModelEditToolCommands.States.TableSize.#ctor(System.Int32,System.Int32)">
      <exclude />
    </member>
    <member name="M:ModelText.ModelEditToolCommands.States.TableSize.#ctor(System.String[])">
      <exclude />
    </member>
    <member name="M:ModelText.ModelEditToolCommands.States.TableSize.equals(ModelText.ModelEditToolCommands.States.TableSize)">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditToolCommands.States.TableSize.nColumns">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditToolCommands.States.TableSize.nRows">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditToolCommands.States.TableSize.asStrings">
      <summary>
            This property is used for automated testing
            </summary>
    </member>
    <member name="T:ModelText.ModelEditToolCommands.OnToolCommand">
      <summary>
            Encapsulates a method which can be passed to the
            <see cref="P:ModelText.ModelEditToolCommands.IToolContainer.onToolCommand" /> property of the
            <see cref="T:ModelText.ModelEditToolCommands.IToolContainer" /> interface.
            </summary>
      <param name="command">This is passed to the
            method that's installed via the <see cref="P:ModelText.ModelEditToolCommands.IToolContainer.onToolCommand" /> property,
            to indicate which of the <c>Command</c> instances on the toolbar is being pressed.</param>
      <example>
            See <a href="4bd969d3-0ad9-4bcc-bd65-67d274aa1f4a.htm#onToolCommand">Setting the Application Event Handler</a>
            for an example of how to use this property.
            </example>
    </member>
    <member name="T:ModelText.ModelEditToolCommands.IToolContainer">
      <summary>
            An instance of this <c>IToolContainer</c> is returned by the
            <c>ModelText.ModelEditControl.IModelEdit.toolContainer</c>
            property of the
            <c>ModelText.ModelEditControl.IModelEdit</c>
            interface.
            </summary>
    </member>
    <member name="M:ModelText.ModelEditToolCommands.IToolContainer.getCommandState(ModelText.ModelEditToolCommands.Command)">
      <summary>
            Gets the <see cref="T:ModelText.ModelEditToolCommands.CommandState" /> associated with this <c>Command</c> instance.
            </summary>
      <param name="command">The <c>Command</c> instance whose <c>CommandState</c> you want to get:
            this will be one of the members of the static <see cref="T:ModelText.ModelEditToolCommands.CommandInstance" /> class.</param>
      <returns>The <see cref="T:ModelText.ModelEditToolCommands.CommandState" /> instance which specifies the visibility and the
            enabled state of the specified <c>Command</c> instance.</returns>
      <example>
            See
            <a href="4bd969d3-0ad9-4bcc-bd65-67d274aa1f4a.htm#visibility">Setting the Visibility of a Command</a>
            for an example of how to use this method.
            </example>
    </member>
    <member name="P:ModelText.ModelEditToolCommands.IToolContainer.Item(ModelText.ModelEditToolCommands.Commands.ButtonCommand)">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditToolCommands.IToolContainer.Item(ModelText.ModelEditToolCommands.Commands.SelectCommand)">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditToolCommands.IToolContainer.Item(ModelText.ModelEditToolCommands.Commands.MenuCommand)">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditToolCommands.IToolContainer.Item(ModelText.ModelEditToolCommands.Commands.NewTableCommand)">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditToolCommands.IToolContainer.Item(ModelText.ModelEditToolCommands.Commands.EditTableCommand)">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditToolCommands.IToolContainer.showItemToolTips">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditToolCommands.IToolContainer.onToolCommand">
      <summary>
            This property can be set, to install an application-defined EventHandler which will be notified when
            a ButtonCommand is invoked.
            Only one event-handler at a time can be installed (installing a new one will uninstall any existing one).
            </summary>
      <example>
            See <a href="4bd969d3-0ad9-4bcc-bd65-67d274aa1f4a.htm#onToolCommand">Setting the Application Event Handler</a>
            for an example of how to use this property.
            </example>
    </member>
    <member name="P:ModelText.ModelEditToolCommands.IToolContainer.visible">
      <summary>
            This property can be set to show or hide the entire toolbar.
            </summary>
    </member>
    <member name="T:ModelText.ModelEditToolCommands.Commands.ToolActions">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.Commands.ToolActions.commandSave">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.Commands.ToolActions.commandCut">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.Commands.ToolActions.commandCopy">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.Commands.ToolActions.commandPaste">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.Commands.ToolActions.commandUndo">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.Commands.ToolActions.commandRedo">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.Commands.ToolActions.commandPromote">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.Commands.ToolActions.commandDemote">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.Commands.ToolActions.commandListBullets">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.Commands.ToolActions.commandListNumbered">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.Commands.ToolActions.commandInsertHyperlink">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.Commands.ToolActions.commandInsertTable">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.Commands.ToolActions.commandEditTable">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.Commands.ToolActions.commandOutlineLevel">
      <exclude />
    </member>
    <member name="T:ModelText.ModelEditToolCommands.CommandState">
      <summary>
            The <c>CommandState</c> class contains the run-time data associated with each <see cref="T:ModelText.ModelEditToolCommands.Command" /> instance.
            </summary>
      <remarks>
            Command instances are immutable fly-weight onjects which contain no run-time state data (they
            only contain const data).
            There may be more than one <c>CommandState</c> per <c>Command</c>, if and only if there is more than
            one <see cref="T:ModelText.ModelEditToolCommands.IToolContainer" /> instance (note that there's only one <c>IToolContainer</c> instance per control, but an
            application might have more than one HTML control and in that way more than one <c>IToolContainer</c> instance).
            </remarks>
      <example>
            See <a href="4bd969d3-0ad9-4bcc-bd65-67d274aa1f4a.htm#visibility">Setting the Visibility of a Command</a>
            for an example of how to use this class.
            </example>
    </member>
    <member name="M:ModelText.ModelEditToolCommands.CommandState.#ctor">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditToolCommands.CommandState.enabled">
      <summary>
            This property is invoked by the application logic to enable or disable the command.
            The UI controls subscribe to an event within this class, so that setting this property
            changes the <c>Enabled</c> state of the UI controls.
            </summary>
      <example>
            See <a href="4bd969d3-0ad9-4bcc-bd65-67d274aa1f4a.htm#visibility">Setting the Visibility of a Command</a>
            for an example of how to use this class.
            </example>
    </member>
    <member name="E:ModelText.ModelEditToolCommands.CommandState.onEnabled">
      <summary>
            This event is fired when the enabled state is changed by 
            the application logic's setting the enabled property.
            </summary>
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditToolCommands.CommandState.visible">
      <summary>
            This property is invoked by the application logic to show or hide the command.
            The UI controls subscribe to an event within this class, so that setting this property
            changes the <c>Visible</c> state of the UI controls.
            </summary>
      <example>
            See <a href="4bd969d3-0ad9-4bcc-bd65-67d274aa1f4a.htm#visibility">Setting the Visibility of a Command</a>
            for an example of how to use this class.
            </example>
    </member>
    <member name="E:ModelText.ModelEditToolCommands.CommandState.onVisible">
      <exclude />
    </member>
    <member name="T:ModelText.ModelEditToolCommands.CommandState.Enabled">
      <exclude />
    </member>
    <member name="T:ModelText.ModelEditToolCommands.CommandState.Visible">
      <exclude />
    </member>
    <member name="T:ModelText.ModelEditToolCommands.Commands.ButtonCommand">
      <summary>
            The ButtonCommand class is for commands which have an associated Clicked event.
            </summary>
    </member>
    <member name="T:ModelText.ModelEditToolCommands.Command">
      <summary>
            The static instances of this <c>Command</c> class are defined in the <see cref="T:ModelText.ModelEditToolCommands.CommandInstance" /> class.
            </summary>
      <remarks>
            The <c>Command</c> instances are immutable flyweights, which identify the commands supported by the application.
            Every <c>Command</c> instance has an associated <see cref="T:ModelText.ModelEditToolCommands.CommandState" /> instance, which specifies
            whether the command is visible and/or enabled, and which you can access via the
            <see cref="M:ModelText.ModelEditToolCommands.IToolContainer.getCommandState(ModelText.ModelEditToolCommands.Command)" /> method.
            </remarks>
    </member>
    <member name="M:ModelText.ModelEditToolCommands.Command.#ctor(System.String,System.String)">
      <exclude />
    </member>
    <member name="M:ModelText.ModelEditToolCommands.Command.ToString">
      <exclude />
    </member>
    <member name="M:ModelText.ModelEditToolCommands.Command.getCommandState(ModelText.ModelEditToolCommands.IToolContainer)">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditToolCommands.Command.name">
      <summary>
            Gets the name of the command: for example, the
            name associated with the <see cref="P:ModelText.ModelEditToolCommands.CommandInstance.commandSave" /> instance is <c>Save</c>.
            </summary>
    </member>
    <member name="P:ModelText.ModelEditToolCommands.Command.text">
      <summary>
            Gets the text of the command: for example, the
            text associated with the <see cref="P:ModelText.ModelEditToolCommands.CommandInstance.commandSave" /> instance is <c>Save (Ctrl+S)</c>.
            </summary>
    </member>
    <member name="M:ModelText.ModelEditToolCommands.Commands.ButtonCommand.#ctor(System.String,System.String)">
      <exclude />
    </member>
    <member name="M:ModelText.ModelEditToolCommands.Commands.ButtonCommand.getCommandState(ModelText.ModelEditToolCommands.IToolContainer)">
      <exclude />
    </member>
    <member name="T:ModelText.ModelEditToolCommands.Commands.MenuCommandT`1">
      <exclude />
    </member>
    <member name="M:ModelText.ModelEditToolCommands.Commands.MenuCommandT`1.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{`0})">
      <exclude />
    </member>
    <member name="M:ModelText.ModelEditToolCommands.Commands.MenuCommandT`1.find(System.String)">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditToolCommands.Commands.MenuCommandT`1.items">
      <exclude />
    </member>
    <member name="T:ModelText.ModelEditToolCommands.Commands.MenuCommand">
      <summary>
            The MenuCommand class is for a collection of other commands
            </summary>
    </member>
    <member name="M:ModelText.ModelEditToolCommands.Commands.MenuCommand.#ctor(System.String,System.String,System.Collections.Generic.List{ModelText.ModelEditToolCommands.Command})">
      <exclude />
    </member>
    <member name="M:ModelText.ModelEditToolCommands.Commands.MenuCommand.getCommandState(ModelText.ModelEditToolCommands.IToolContainer)">
      <exclude />
    </member>
    <member name="T:ModelText.ModelEditToolCommands.Commands.SelectCommand">
      <summary>
            The SelectCommand class is for commands which have several associated OptionCommand instances
            plus a single Selected event.
            </summary>
    </member>
    <member name="M:ModelText.ModelEditToolCommands.Commands.SelectCommand.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{ModelText.ModelEditToolCommands.Commands.OptionCommand})">
      <exclude />
    </member>
    <member name="M:ModelText.ModelEditToolCommands.Commands.SelectCommand.getCommandState(ModelText.ModelEditToolCommands.IToolContainer)">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditToolCommands.Commands.SelectCommand.options">
      <exclude />
    </member>
    <member name="T:ModelText.ModelEditToolCommands.Commands.OptionCommand">
      <summary>
            The OptionCommand class is for each of the choices of a SelectCommand.
            There's no event associated with each OptionCommand (instead there's a single
            Selected event associated with the SelectCommand).
            </summary>
    </member>
    <member name="M:ModelText.ModelEditToolCommands.Commands.OptionCommand.#ctor(System.String,System.String)">
      <exclude />
    </member>
    <member name="M:ModelText.ModelEditToolCommands.Commands.OptionCommand.getCommandState(ModelText.ModelEditToolCommands.IToolContainer)">
      <exclude />
    </member>
    <member name="T:ModelText.ModelEditToolCommands.Commands.NewTableCommand">
      <summary>
            The NewTableCommand class is for commands which have an associated NewTable event.
            </summary>
    </member>
    <member name="M:ModelText.ModelEditToolCommands.Commands.NewTableCommand.#ctor(System.String,System.String)">
      <exclude />
    </member>
    <member name="M:ModelText.ModelEditToolCommands.Commands.NewTableCommand.getCommandState(ModelText.ModelEditToolCommands.IToolContainer)">
      <exclude />
    </member>
    <member name="T:ModelText.ModelEditToolCommands.Commands.EditTableCommand">
      <summary>
            The NewTableCommand class is for commands which have an associated NewTable event.
            </summary>
    </member>
    <member name="M:ModelText.ModelEditToolCommands.Commands.EditTableCommand.#ctor(System.String,System.String)">
      <exclude />
    </member>
    <member name="M:ModelText.ModelEditToolCommands.Commands.EditTableCommand.getCommandState(ModelText.ModelEditToolCommands.IToolContainer)">
      <exclude />
    </member>
    <member name="T:ModelText.ModelEditToolCommands.NamespaceDoc">
      <summary>
            This namespace includes an interface and classes to interact with the toolbar.
            <para>
            See
            <a href="4bd969d3-0ad9-4bcc-bd65-67d274aa1f4a.htm">Interacting with the Toolbar</a>, for an overview
            and examples of how to use this API.
            </para></summary>
    </member>
    <member name="T:ModelText.ModelEditSettings.IModelEditSettings">
      <summary>
            This interface defines configurable settings which can be changed
            to alter the behaviour of a ModelEdit instance.
            </summary>
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditSettings.IModelEditSettings.debugUndoAndRedo">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditSettings.IModelEditSettings.debugUndoAndRedoAll">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditSettings.IModelEditSettings.onInsertAtMoveOffset">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditSettings.IModelEditSettings.onInsertMergeTextRuns">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditSettings.IModelEditSettings.onJoinKeepFirstParagraphStyle">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditSettings.IModelEditSettings.onRemoveJoinParagraphs">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditSettings.IModelEditSettings.onSelectAvoidReadonly">
      <summary>
            This property avoids setting the selection within read-only DOM nodes.
            </summary>
    </member>
    <member name="P:ModelText.ModelEditSettings.IModelEditSettings.preventLoseFocus">
      <summary>
            You can enable this property to tell the control to keep the keyboard input focus.
            The control will do this by returning false in response to the Validating event.
            If enabled, you must disable this property in your FormCLosing event (otherwise
            you waon't be able to close your form).
            The initial default value for this property is false.
            </summary>
    </member>
    <member name="P:ModelText.ModelEditSettings.IModelEditSettings.useLegacyTableSize">
      <summary>
            This property is used in some test cases to enable a minor bug in the size of tables,
            so that I don't need to redo the corresponding test cases (which are testing something
            else but which depend on the exact/old/buggy table size).
            </summary>
    </member>
    <member name="T:ModelText.ModelEditToolCommands.CommandInstance">
      <summary>
            This static <c>CommandInstance</c> class contains a static <see cref="T:ModelText.ModelEditToolCommands.Command" /> instance for each
            of the items on the toolbar.
            </summary>
    </member>
    <member name="P:ModelText.ModelEditToolCommands.CommandInstance.commandSave">
      <summary>
            This is the
            <a href="../../user_interface.aspx#save" target="_blank">Save (Ctrl+S)</a> command.
            </summary>
    </member>
    <member name="P:ModelText.ModelEditToolCommands.CommandInstance.commandCut">
      <summary>
            This is the
            <a href="../../user_interface.aspx#clipboard" target="_blank">Cut (Ctrl+X)</a> command.
            </summary>
    </member>
    <member name="P:ModelText.ModelEditToolCommands.CommandInstance.commandCopy">
      <summary>
            This is the
            <a href="../../user_interface.aspx#clipboard" target="_blank">Copy (Ctrl+C)</a> command.
            </summary>
    </member>
    <member name="P:ModelText.ModelEditToolCommands.CommandInstance.commandPaste">
      <summary>
            This is the
            <a href="../../user_interface.aspx#clipboard" target="_blank">Paste (Ctrl+V)</a> command.
            </summary>
    </member>
    <member name="P:ModelText.ModelEditToolCommands.CommandInstance.commandUndo">
      <summary>
            This is the
            <a href="../../user_interface.aspx#undoredo" target="_blank">Undo (Ctrl+Z)</a> command.
            </summary>
    </member>
    <member name="P:ModelText.ModelEditToolCommands.CommandInstance.commandRedo">
      <summary>
            This is the
            <a href="../../user_interface.aspx#undoredo" target="_blank">Redo (Ctrl+Y)</a> command.
            </summary>
    </member>
    <member name="P:ModelText.ModelEditToolCommands.CommandInstance.commandPromote">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditToolCommands.CommandInstance.commandDemote">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditToolCommands.CommandInstance.commandListBullets">
      <summary>
            This is the
            <a href="../../user_interface.aspx#list" target="_blank">Bullet List</a> command.
            </summary>
    </member>
    <member name="P:ModelText.ModelEditToolCommands.CommandInstance.commandListNumbered">
      <summary>
            This is the
            <a href="../../user_interface.aspx#list" target="_blank">Numbered List</a> command.
            </summary>
    </member>
    <member name="P:ModelText.ModelEditToolCommands.CommandInstance.commandInsertHyperlink">
      <summary>
            This is the
            <a href="../../user_interface.aspx#hyperlink" target="_blank">Insert Hyperlink</a> command.
            </summary>
    </member>
    <member name="P:ModelText.ModelEditToolCommands.CommandInstance.commandInsertTable">
      <summary>
            This is the
            <a href="../../user_interface.aspx#table" target="_blank">Insert Table</a> command.
            </summary>
    </member>
    <member name="P:ModelText.ModelEditToolCommands.CommandInstance.commandEditTable">
      <summary>
            This is the
            <a href="../../user_interface.aspx#table" target="_blank">Edit Table</a> command.
            </summary>
    </member>
    <member name="P:ModelText.ModelEditToolCommands.CommandInstance.commandOutlineLevel">
      <summary>
            This is the
            <a href="../../user_interface.aspx#heading" target="_blank">Outline Level</a> command.
            </summary>
    </member>
    <member name="T:ModelText.ModelEditToolCommands.States.Clicked">
      <exclude />
    </member>
    <member name="T:ModelText.ModelEditToolCommands.States.ButtonCommandState">
      <summary>
            The ButtonCommandState class contains the run-time data associated with each ButtonCommand instance.
            </summary>
    </member>
    <member name="M:ModelText.ModelEditToolCommands.States.ButtonCommandState.clicked">
      <summary>
            This method is invoked by the UI (i.e. by the ToolContainer.Button instance) when the user
            clicks the button.
            The application logic subscribes to the onClicked event, so invoking this method
            invokes a Clicked delegate in the application logic.
            </summary>
    </member>
    <member name="E:ModelText.ModelEditToolCommands.States.ButtonCommandState.onClicked">
      <summary>
            This event is fired when the end-user clicks a ToolContainer.Button instance.
            An application delegate subscribes to this event.
            </summary>
    </member>
    <member name="T:ModelText.ModelEditToolCommands.States.MenuCommandState">
      <exclude />
    </member>
    <member name="T:ModelText.ModelEditToolCommands.States.SelectCommandState">
      <summary>
            The SelectCommandState class contains the run-time data associated with each SelectCommand instance.
            </summary>
    </member>
    <member name="M:ModelText.ModelEditToolCommands.States.SelectCommandState.selected(ModelText.ModelEditToolCommands.Commands.OptionCommand)">
      <summary>
            This method is invoked by the UI (i.e. by the ToolContainer.ComboBox instance) when the user
            makes a selection.
            The application logic subscribes to the onSelected event, so invoking this method
            invokes a Selected delegate in the application logic.
            </summary>
    </member>
    <member name="M:ModelText.ModelEditToolCommands.States.SelectCommandState.select(ModelText.ModelEditToolCommands.Commands.OptionCommand)">
      <summary>
            This method is invoked by the application logic, to change the current selection that's displayed in the UI.
            The UI controls subscribe to the onSelect event, so setting this property
            changes the Text of the UI controls.
            </summary>
    </member>
    <member name="E:ModelText.ModelEditToolCommands.States.SelectCommandState.onSelected">
      <summary>
            This event is fired when the end-user clicks a ToolContainer.ComboBox instance.
            An application delegate subscribes to this event.
            </summary>
    </member>
    <member name="E:ModelText.ModelEditToolCommands.States.SelectCommandState.onSelect">
      <summary>
            This event is fired when the application changes the selection.
            A UI control subscribes to this event.
            </summary>
    </member>
    <member name="T:ModelText.ModelEditToolCommands.States.SelectCommandState.Selected">
      <exclude />
    </member>
    <member name="T:ModelText.ModelEditToolCommands.States.NewTableCommandState">
      <exclude />
    </member>
    <member name="M:ModelText.ModelEditToolCommands.States.NewTableCommandState.newTable(ModelText.ModelEditToolCommands.States.TableSize)">
      <summary>
            This method is invoked by the UI (i.e. by the ToolContainer.ComboBox instance) when the user
            makes a selection.
            The application logic subscribes to the onSelected event, so invoking this method
            invokes a Selected delegate in the application logic.
            </summary>
    </member>
    <member name="E:ModelText.ModelEditToolCommands.States.NewTableCommandState.onNewTable">
      <exclude />
    </member>
    <member name="T:ModelText.ModelEditToolCommands.States.NewTableCommandState.NewTable">
      <exclude />
    </member>
    <member name="T:ModelText.ModelEditToolCommands.States.EditTableCommandState">
      <exclude />
    </member>
    <member name="M:ModelText.ModelEditToolCommands.States.EditTableCommandState.editTable(ModelText.ModelEditToolCommands.States.TableEditCommand)">
      <summary>
            This method is invoked by the UI (i.e. by the ToolContainer.ComboBox instance) when the user
            makes a selection.
            The application logic subscribes to the onSelected event, so invoking this method
            invokes a Selected delegate in the application logic.
            </summary>
    </member>
    <member name="E:ModelText.ModelEditToolCommands.States.EditTableCommandState.onEditTable">
      <exclude />
    </member>
    <member name="P:ModelText.ModelEditToolCommands.States.EditTableCommandState.canDeleteColumn">
      <exclude />
    </member>
    <member name="E:ModelText.ModelEditToolCommands.States.EditTableCommandState.onCanDeleteColumn">
      <summary>
            This event is fired when the enabled state is changed by 
            the application logic's setting the enabled property.
            </summary>
    </member>
    <member name="T:ModelText.ModelEditToolCommands.States.EditTableCommandState.EditTable">
      <exclude />
    </member>
    <member name="T:ModelText.ModelEditToolCommands.States.TableEditCommand">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.States.TableEditCommand.InsertToTheLeft">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.States.TableEditCommand.InsertToTheRight">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.States.TableEditCommand.InsertAbove">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.States.TableEditCommand.InsertBelow">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.States.TableEditCommand.DeleteEntireRow">
      <exclude />
    </member>
    <member name="F:ModelText.ModelEditToolCommands.States.TableEditCommand.DeleteEntireColumn">
      <exclude />
    </member>
    <member name="T:ModelText.ModelException.LogUnhandledException">
      <summary>
            Use an instance of this class to log an unhandled exception.
            The information created by this class is in a text file,
            which can be reported for technical support.
            </summary>
    </member>
    <member name="M:ModelText.ModelException.LogUnhandledException.addCallback(ModelText.ModelException.LogUnhandledException.Callback)">
      <exclude />
    </member>
    <member name="M:ModelText.ModelException.LogUnhandledException.canEnable">
      <summary>
            Call this method before you invoke the <see cref="M:ModelText.ModelException.LogUnhandledException.enable(System.Boolean)" /> method.
            This method returns false, if the caller doesn't have the
            <c>SecurityPermission(SecurityPermissionFlag.ControlAppDomain)</c>
            permission, which would be needed in order to call the enable method.
            </summary>
      <returns>True if the caller has sufficient permission to invoke the
            <see cref="M:ModelText.ModelException.LogUnhandledException.enable(System.Boolean)" /> method, otherwise false.</returns>
    </member>
    <member name="M:ModelText.ModelException.LogUnhandledException.enable(System.Boolean)">
      <summary>
            Enables default processing of the UnhandledException event.
            </summary>
      <param name="extraInformation">
            The initial value which will be assigned to the <see cref="P:ModelText.ModelException.LogUnhandledException.extraInformation" /> property.
            </param>
    </member>
    <member name="M:ModelText.ModelException.LogUnhandledException.writeToFile(System.UnhandledExceptionEventArgs)">
      <summary>
            Write details of the unhandled exception to a log file.
            The text which will be written is the text returned by the <see cref="M:ModelText.ModelException.LogUnhandledException.getText(System.UnhandledExceptionEventArgs)" /> method.
            The path of the file to which the text is written is the path returned by the <see cref="P:ModelText.ModelException.LogUnhandledException.fullPathOfLogFile" /> property.
            </summary>
      <param name="args">The <see cref="T:System.UnhandledExceptionEventArgs" /> instance which is passed
            to the application's <see cref="E:System.AppDomain.UnhandledException" /> event.</param>
    </member>
    <member name="M:ModelText.ModelException.LogUnhandledException.getText(System.UnhandledExceptionEventArgs)">
      <summary>
            Gets the text to be logged.
            The <see cref="M:ModelText.ModelException.LogUnhandledException.writeToFile(System.UnhandledExceptionEventArgs)" /> method uses this property implicitly,
            but you could also use this property explicitly if you want to do something else with the text
            other than write it to a log file.
            </summary>
      <param name="args">The <see cref="T:System.UnhandledExceptionEventArgs" /> instance which is passed
            to the application's <see cref="E:System.AppDomain.UnhandledException" /> event.</param>
      <returns>The text to be logged.</returns>
    </member>
    <member name="P:ModelText.ModelException.LogUnhandledException.extraInformation">
      <summary>
            Gets or sets whether extra information will be inserted in the log file if there's an unhandled exception.
            Setting this property to true might be necessary in order to help debug an unhandled exception.
            </summary>
      <remarks>
            If this property is set to true, then the control is slightly (although perhaps unnoticeably) slower at run-time:
            because the extra information is being prepared continuously whether or not there's an exception (so that it
            exists pre-prepared if there ever is an exception.
            </remarks>
    </member>
    <member name="P:ModelText.ModelException.LogUnhandledException.fullPathOfLogFile">
      <summary>
            Gets or sets the path of the file to which the unhandled exception is logged.
            If you don't explicitly set the value of this property before you invoke the
            <see cref="M:ModelText.ModelException.LogUnhandledException.writeToFile(System.UnhandledExceptionEventArgs)" /> method, then the value returned by the
            <see cref="P:ModelText.ModelException.LogUnhandledException.defaultPathOfLogFile" /> property is used instead.
            </summary>
    </member>
    <member name="P:ModelText.ModelException.LogUnhandledException.defaultPathOfLogFile">
      <summary>
            Gets the value used for the <see cref="P:ModelText.ModelException.LogUnhandledException.fullPathOfLogFile" /> property, if the fullPathOfLogFile value isn't set explicitly.
            <para>
            The implementation of this method is as follows:
            </para><code>
            public string defaultPathOfLogFile
            {
                get
                {
                    string commonUserFolder = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                    string path = commonUserFolder + @"\" + "ModelText.exception.txt";
                    return path;
                }
            }
            </code><para>
            On a Windows Vista machine, the resulting path is something like <c>C:\Users\[YourUserName]\AppData\Roaming\ModelText.exception.txt</c>.
            </para></summary>
    </member>
    <member name="T:ModelText.ModelException.LogUnhandledException.Callback">
      <exclude />
    </member>
    <member name="T:ModelText.ModelException.NamespaceDoc">
      <summary>
            This namespace includes a class which can generate a log file to help debug any unhandled exceptions.
            <para>See <a href="b478791a-2381-48a4-a232-4ceca7e35ba7.htm">Technical support</a> for further details.</para></summary>
    </member>
  </members>
</doc>